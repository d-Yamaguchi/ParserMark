Package org.cello;

Helpers
unicode_input_character = [0..0xffff];
ht  = 0x0009;
lf  = 0x000a;
ff  = 0x000c;
cr  = 0x000d;
sp  = ' ';

not_star = [unicode_input_character - '*'];
not_star_not_slash = [unicode_input_character - ['*' + '/']];

unicode_letter =
  [0x0041..0x005a] | [0x0061..0x007a] | [0x00aa..0x00aa] | [0x00b5..0x00b5] |
  [0x00ba..0x00ba] | [0x00c0..0x00d6] | [0x00d8..0x00f6] | [0x00f8..0x01f5] |
  [0x01fa..0x0217] | [0x0250..0x02a8] | [0x02b0..0x02b8] | [0x02bb..0x02c1] |
  [0x02d0..0x02d1] | [0x02e0..0x02e4] | [0x037a..0x037a] | [0x0386..0x0386] |
  [0x0388..0x038a] | [0x038c..0x038c] | [0x038e..0x03a1] | [0x03a3..0x03ce] |
  [0x03d0..0x03d6] | [0x03da..0x03da] | [0x03dc..0x03dc] | [0x03de..0x03de] |
  [0x03e0..0x03e0] | [0x03e2..0x03f3] | [0x0401..0x040c] | [0x040e..0x044f] |
  [0x0451..0x045c] | [0x045e..0x0481] | [0x0490..0x04c4] | [0x04c7..0x04c8] |
  [0x04cb..0x04cc] | [0x04d0..0x04eb] | [0x04ee..0x04f5] | [0x04f8..0x04f9] |
  [0x0531..0x0556] | [0x0559..0x0559] | [0x0561..0x0587] | [0x05d0..0x05ea] |
  [0x05f0..0x05f2] | [0x0621..0x063a] | [0x0640..0x064a] | [0x0671..0x06b7] |
  [0x06ba..0x06be] | [0x06c0..0x06ce] | [0x06d0..0x06d3] | [0x06d5..0x06d5] |
  [0x06e5..0x06e6] | [0x0905..0x0939] | [0x093d..0x093d] | [0x0958..0x0961] |
  [0x0985..0x098c] | [0x098f..0x0990] | [0x0993..0x09a8] | [0x09aa..0x09b0] |
  [0x09b2..0x09b2] | [0x09b6..0x09b9] | [0x09dc..0x09dd] | [0x09df..0x09e1] |
  [0x09f0..0x09f1] | [0x0a05..0x0a0a] | [0x0a0f..0x0a10] | [0x0a13..0x0a28] |
  [0x0a2a..0x0a30] | [0x0a32..0x0a33] | [0x0a35..0x0a36] | [0x0a38..0x0a39] |
  [0x0a59..0x0a5c] | [0x0a5e..0x0a5e] | [0x0a72..0x0a74] | [0x0a85..0x0a8b] |
  [0x0a8d..0x0a8d] | [0x0a8f..0x0a91] | [0x0a93..0x0aa8] | [0x0aaa..0x0ab0] |
  [0x0ab2..0x0ab3] | [0x0ab5..0x0ab9] | [0x0abd..0x0abd] | [0x0ae0..0x0ae0] |
  [0x0b05..0x0b0c] | [0x0b0f..0x0b10] | [0x0b13..0x0b28] | [0x0b2a..0x0b30] |
  [0x0b32..0x0b33] | [0x0b36..0x0b39] | [0x0b3d..0x0b3d] | [0x0b5c..0x0b5d] |
  [0x0b5f..0x0b61] | [0x0b85..0x0b8a] | [0x0b8e..0x0b90] | [0x0b92..0x0b95] |
  [0x0b99..0x0b9a] | [0x0b9c..0x0b9c] | [0x0b9e..0x0b9f] | [0x0ba3..0x0ba4] |
  [0x0ba8..0x0baa] | [0x0bae..0x0bb5] | [0x0bb7..0x0bb9] | [0x0c05..0x0c0c] |
  [0x0c0e..0x0c10] | [0x0c12..0x0c28] | [0x0c2a..0x0c33] | [0x0c35..0x0c39] |
  [0x0c60..0x0c61] | [0x0c85..0x0c8c] | [0x0c8e..0x0c90] | [0x0c92..0x0ca8] |
  [0x0caa..0x0cb3] | [0x0cb5..0x0cb9] | [0x0cde..0x0cde] | [0x0ce0..0x0ce1] |
  [0x0d05..0x0d0c] | [0x0d0e..0x0d10] | [0x0d12..0x0d28] | [0x0d2a..0x0d39] |
  [0x0d60..0x0d61] | [0x0e01..0x0e2e] | [0x0e30..0x0e30] | [0x0e32..0x0e33] |
  [0x0e40..0x0e46] | [0x0e81..0x0e82] | [0x0e84..0x0e84] | [0x0e87..0x0e88] |
  [0x0e8a..0x0e8a] | [0x0e8d..0x0e8d] | [0x0e94..0x0e97] | [0x0e99..0x0e9f] |
  [0x0ea1..0x0ea3] | [0x0ea5..0x0ea5] | [0x0ea7..0x0ea7] | [0x0eaa..0x0eab] |
  [0x0ead..0x0eae] | [0x0eb0..0x0eb0] | [0x0eb2..0x0eb3] | [0x0ebd..0x0ebd] |
  [0x0ec0..0x0ec4] | [0x0ec6..0x0ec6] | [0x0edc..0x0edd] | [0x0f40..0x0f47] |
  [0x0f49..0x0f69] | [0x10a0..0x10c5] | [0x10d0..0x10f6] | [0x1100..0x1159] |
  [0x115f..0x11a2] | [0x11a8..0x11f9] | [0x1e00..0x1e9b] | [0x1ea0..0x1ef9] |
  [0x1f00..0x1f15] | [0x1f18..0x1f1d] | [0x1f20..0x1f45] | [0x1f48..0x1f4d] |
  [0x1f50..0x1f57] | [0x1f59..0x1f59] | [0x1f5b..0x1f5b] | [0x1f5d..0x1f5d] |
  [0x1f5f..0x1f7d] | [0x1f80..0x1fb4] | [0x1fb6..0x1fbc] | [0x1fbe..0x1fbe] |
  [0x1fc2..0x1fc4] | [0x1fc6..0x1fcc] | [0x1fd0..0x1fd3] | [0x1fd6..0x1fdb] |
  [0x1fe0..0x1fec] | [0x1ff2..0x1ff4] | [0x1ff6..0x1ffc] | [0x207f..0x207f] |
  [0x2102..0x2102] | [0x2107..0x2107] | [0x210a..0x2113] | [0x2115..0x2115] |
  [0x2118..0x211d] | [0x2124..0x2124] | [0x2126..0x2126] | [0x2128..0x2128] |
  [0x212a..0x2131] | [0x2133..0x2138] | [0x3005..0x3005] | [0x3031..0x3035] |
  [0x3041..0x3094] | [0x309b..0x309e] | [0x30a1..0x30fa] | [0x30fc..0x30fe] |
  [0x3105..0x312c] | [0x3131..0x318e] | [0x4e00..0x9fa5] | [0xac00..0xd7a3] |
  [0xf900..0xfa2d] | [0xfb00..0xfb06] | [0xfb13..0xfb17] | [0xfb1f..0xfb28] |
  [0xfb2a..0xfb36] | [0xfb38..0xfb3c] | [0xfb3e..0xfb3e] | [0xfb40..0xfb41] |
  [0xfb43..0xfb44] | [0xfb46..0xfbb1] | [0xfbd3..0xfd3d] | [0xfd50..0xfd8f] |
  [0xfd92..0xfdc7] | [0xfdf0..0xfdfb] | [0xfe70..0xfe72] | [0xfe74..0xfe74] |
  [0xfe76..0xfefc] | [0xff21..0xff3a] | [0xff41..0xff5a] | [0xff66..0xffbe] |
  [0xffc2..0xffc7] | [0xffca..0xffcf] | [0xffd2..0xffd7] | [0xffda..0xffdc];

unicode_digit =
  [0x0030..0x0039] | [0x0660..0x0669] | [0x06f0..0x06f9] | [0x0966..0x096f] |
  [0x09e6..0x09ef] | [0x0a66..0x0a6f] | [0x0ae6..0x0aef] | [0x0b66..0x0b6f] |
  [0x0be7..0x0bef] | [0x0c66..0x0c6f] | [0x0ce6..0x0cef] | [0x0d66..0x0d6f] |
  [0x0e50..0x0e59] | [0x0ed0..0x0ed9] | [0x0f20..0x0f29] | [0xff10..0xff19];

java_letter = unicode_letter | '$' | '_';
java_letter_or_digit = unicode_letter | unicode_digit | '$' | '_';

line_terminator = lf | cr | cr lf;
input_character = [unicode_input_character - [cr + lf]];

white_space = (sp | ht | ff | line_terminator);

traditional_comment = '/*' not_star* ('*' (not_star_not_slash not_star*)?)* '*/';

end_of_line_comment = '//' input_character* line_terminator?;

underscores = '_'+;

non_zero_digit = '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9';
digit = '0' | non_zero_digit;
digit_or_underscore = digit | '_';
digits_and_underscores = digit_or_underscore+;
digits = digit | digit digits_and_underscores? digit;
decimal_numeral = '0' | non_zero_digit digits? | non_zero_digit underscores digits;

integer_type_suffix = 'l' | 'L';

decimal_integer_literal = decimal_numeral integer_type_suffix?;

single_character = [input_character - [''' + '\']];
escape_sequence = '\b' | '\t' | '\n' | '\f' | '\r' | '\"' | '\' ''' | '\\';
string_character = [input_character - ['"' + '\']] | escape_sequence;
identifier = java_letter java_letter_or_digit*;



Tokens
boolean = 'boolean';
colon  = 'colon';
else   = 'else';
if     = 'if';
if1     = 'if1';
if2     = 'if2';
if3     = 'if3';
if4     = 'if4';
if5     = 'if5';
if6     = 'if6';
if7     = 'if7';
if8     = 'if8';
if9     = 'if9';
if_a     = 'ifA';
if_b     = 'ifB';
import = 'import';
int    = 'int';
long   = 'long';
dummy_token1 = 'dummy1';
dummy_token2 = 'dummy2';
question = '?';
return = 'return';

period = '.';
comma = ',';
semi  = ';';
ex    = '!';
dot   = '...';
left_paren = '(';
right_paren = ')';
left_braces = '{';
right_braces = '}';
assign  = '=' ;
star_assign = '*=';
slash_assign = '/=';
percent_assign = '%=';
plus_assign = '+=';
minus_assign = '-=';
sh_left = '<<=';
sh_right = '>>=';
u_sh = '>>>=';
and_assign = '&=';
caret_assign ='^=';
bar_assign = '|=';
bar_bar = '||';
amp_amp = '&&';
equal   = '==';
n_equal = '!=';
less_than = '<';
greater_than = '>';
less_than_eq = '<=';
greater_than_eq = '>=';
colon_colon = '::';




Productions
import_declaration   = import identifier identifier_repeat* semi ;
identifier_repeat    = period identifier_repeat;
declaration          = method_declaration
                    | variable_declaration
                    | dummy1
                    | dummy2
                    ;
method_declaration   = type identifier left_paren method_param_list right_paren skip ;
skip                 = block | semi ;
method_param_list    = param_list_option? comma_or_dot? ;
param_list_option    = method_param param_list_repeat* ;
param_list_repeat    = comma method_param ;
comma_or_dot         = comma dot ;
method_param         = type identifier? ;
variable_declaration = type variable_list semi ;
variable_list        = init_decl init_decl_repeat* ;
init_decl_repeat     = comma init_decl ;
init_decl            = identifier initial_option? ;
initial_option       = assign initializer ;
initializer          = assignment_expression ;
dummy1               = dummy_token1 variable_list semi ;
dummy2               = dummy_token2 variable_list semi ;

type           = primitive_type | reference_type ;
primitive_type = int
                | boolean
                | long ;
reference_type = identifier ;

block     = left_braces block_alter right_braces ;
block_alter = statement
            | declaration
            ;

statement = block
          | if left_paren expression right_paren block else_option?
          | if1 left_paren expression right_paren block else_option?
          | if2 left_paren expression right_paren block else_option?
          | if3 left_paren expression right_paren block else_option?
          | if4 left_paren expression right_paren block else_option?
          | if5 left_paren expression right_paren block else_option?
          | if6 left_paren expression right_paren block else_option?
          | if7 left_paren expression right_paren block else_option?
          | if8 left_paren expression right_paren block else_option?
          | if9 left_paren expression right_paren block else_option?
          | if_a left_paren expression right_paren block else_option?
          | if_b left_paren expression right_paren block else_option?
          | return expression? semi
          | expression semi
          | semi
          ;
else_option = else block ;

expression            = assignment_expression assignment_ex_repeat* ;
assignment_ex_repeat  = comma assignment_expression ;
assignment_expression = unary_assignment
                        | conditional_expression
                        ;
unary_assignment      = unary_expression assignment_operator assignment_expression;

assignment_operator   = assign
                       | star_assign
                       | slash_assign
                       | percent_assign
                       | plus_assign
                       | minus_assign
                       | sh_left
                       | sh_right
                       | u_sh
                       | and_assign
                       | caret_assign
                       | bar_assign
                       ;

conditional_expression   = logical_expression ex_logical_repeat* ;
ex_logical_repeat        = question expression colon logical_or_expression ;
logical_or_expression    = logical_and_expression logical_and_repeat* ;
logical_and_repeat       = bar_bar logical_and_expression ;
logical_and_expression   = equality_expression equality_ex_repeat* ;
equality_ex_repeat       = amp_amp equality_expression ;
equality_expression      = relational_expression relational_repeat* ;
relational_repeat        = equal_or_n_equal relational_repeat;
equal_or_n_equal         = equal | n_equal ;
relational_expression    = unary_expression unary_expression_expression* ;
unary_expression_repeat  = inequality unary_expression ;
inequality               = less_than
                         | less_than_eq
                         | greater_than
                         | greater_then_eq
                         ;
unary_expression         = postfix_expression
                         | ex unary_expression ;
postfix_expression       = primary_expression function_call* ;
function_call            = left_paren argument_expression_list? right_paren ;
argument_expression_list = assignment_expression argument_expression_list* ;
assignment_expression_repeat = comma assignment_expression;
primary_expression       = constant
                         | left_paren expression right_paren
                         | identifier
                         | function_expression
                         ;
function_expression      = type identifier? left_paren method_param_list right_paren block colon_colon ;
