Terminals unused in grammar

   INC
   DEC
   FOR
   EOF_SYMBOL


Grammar

    0 $accept: Program $end

    1 Program: TopLevel
    2        | Program TopLevel

    3 TopLevel: ImportDeclarations Declaration
    4         | Declaration
    5         | ';'

    6 ImportDeclarations: ImportDeclaration
    7                   | ImportDeclarations ImportDeclaration

    8 ImportDeclaration: IMPORT PackageName ';'

    9 PackageName: QualifiedName '.' '*'
   10            | QualifiedName

   11 Declaration: FunctionDeclaration
   12            | VariableDeclaration

   13 FunctionDeclaration: Type NAME '(' FunctionParamList ')' Block
   14                    | Type NAME '(' FunctionParamList ')' ';'
   15                    | Type NAME '(' ')' Block
   16                    | Type NAME '(' ')' ';'
   17                    | Type Block

   18 FunctionParamList: FunctionParam
   19                  | FunctionParamList ',' FunctionParam
   20                  | ',' VAR_LEN_PARAM

   21 FunctionParam: Type
   22              | Type NAME

   23 Block: '{' BlockInner '}'
   24      | '{' '}'

   25 BlockInner: Statement
   26           | Declaration
   27           | BlockInner Statement
   28           | BlockInner Declaration

   29 Statement: Block
   30          | IfStatement
   31          | ReturnStatement
   32          | ExpressionStatement
   33          | ';'

   34 IfStatement: IF '(' Expression ')' Block
   35            | IF '(' Expression ')' Block ELSE Block

   36 ReturnStatement: RETURN ';'
   37                | RETURN Expression ';'

   38 ExpressionStatement: Expression ';'

   39 VariableDeclaration: Type VariableList ';'

   40 VariableList: InitDecl
   41             | VariableList ',' InitDecl

   42 InitDecl: NAME
   43         | NAME '=' Initializer

   44 Initializer: AssignmentExpression

   45 Type: INT_TYPE
   46     | BOOLEAN_TYPE
   47     | STRING_TYPE
   48     | LONG_TYPE

   49 Expression: AssignmentExpression
   50           | Expression ',' AssignmentExpression

   51 AssignmentExpression: UnaryExpression '=' AssignmentExpression
   52                     | ConditionalExpression

   53 ConditionalExpression: LogicalANDExpression
   54                      | ConditionalExpression OR LogicalANDExpression

   55 LogicalANDExpression: EqualityExpression
   56                     | LogicalANDExpression AND EqualityExpression

   57 EqualityExpression: RelationalExpression
   58                   | EqualityExpression EQ RelationalExpression
   59                   | EqualityExpression NE RelationalExpression

   60 RelationalExpression: UnaryExpression
   61                     | RelationalExpression '<' UnaryExpression
   62                     | RelationalExpression '>' UnaryExpression

   63 UnaryExpression: PostfixExpression
   64                | '!' UnaryExpression

   65 PostfixExpression: PrimaryExpression
   66                  | PrimaryExpression FunctionCall

   67 FunctionCall: '(' ArgumentExpressionList ')'
   68             | '(' ')'

   69 ArgumentExpressionList: AssignmentExpression
   70                       | ArgumentExpressionList ',' AssignmentExpression

   71 PrimaryExpression: Literal
   72                  | '(' Expression ')'

   73 QualifiedName: NAME
   74              | QualifiedName '.' NAME

   75 Literal: INT
   76        | TRUE
   77        | FALSE
   78        | STRING
   79        | NULL_LITERAL
   80        | NAME


Terminals, with rules where they appear

$end (0) 0
'!' (33) 64
'(' (40) 13 14 15 16 34 35 67 68 72
')' (41) 13 14 15 16 34 35 67 68 72
'*' (42) 9
',' (44) 19 20 41 50 70
'.' (46) 9 74
';' (59) 5 8 14 16 33 36 37 38 39
'<' (60) 61
'=' (61) 43 51
'>' (62) 62
'{' (123) 23 24
'}' (125) 23 24
error (256)
VAR_LEN_PARAM (258) 20
EQ (259) 58
NE (260) 59
AND (261) 56
OR (262) 54
INC (263)
DEC (264)
STRING_TYPE (265) 47
INT_TYPE (266) 45
BOOLEAN_TYPE (267) 46
LONG_TYPE (268) 48
IF (269) 34 35
FOR (270)
ELSE (271) 35
RETURN (272) 36 37
FALSE (273) 77
TRUE (274) 76
IMPORT (275) 8
INT (276) 75
STRING (277) 78
NAME (278) 13 14 15 16 22 42 43 73 74 80
EOF_SYMBOL (279)
NULL_LITERAL (280) 79


Nonterminals, with rules where they appear

$accept (38)
    on left: 0
Program (39)
    on left: 1 2, on right: 0 2
TopLevel (40)
    on left: 3 4 5, on right: 1 2
ImportDeclarations (41)
    on left: 6 7, on right: 3 7
ImportDeclaration (42)
    on left: 8, on right: 6 7
PackageName (43)
    on left: 9 10, on right: 8
Declaration (44)
    on left: 11 12, on right: 3 4 26 28
FunctionDeclaration (45)
    on left: 13 14 15 16 17, on right: 11
FunctionParamList (46)
    on left: 18 19 20, on right: 13 14 19
FunctionParam (47)
    on left: 21 22, on right: 18 19
Block (48)
    on left: 23 24, on right: 13 15 17 29 34 35
BlockInner (49)
    on left: 25 26 27 28, on right: 23 27 28
Statement (50)
    on left: 29 30 31 32 33, on right: 25 27
IfStatement (51)
    on left: 34 35, on right: 30
ReturnStatement (52)
    on left: 36 37, on right: 31
ExpressionStatement (53)
    on left: 38, on right: 32
VariableDeclaration (54)
    on left: 39, on right: 12
VariableList (55)
    on left: 40 41, on right: 39 41
InitDecl (56)
    on left: 42 43, on right: 40 41
Initializer (57)
    on left: 44, on right: 43
Type (58)
    on left: 45 46 47 48, on right: 13 14 15 16 17 21 22 39
Expression (59)
    on left: 49 50, on right: 34 35 37 38 50 72
AssignmentExpression (60)
    on left: 51 52, on right: 44 49 50 51 69 70
ConditionalExpression (61)
    on left: 53 54, on right: 52 54
LogicalANDExpression (62)
    on left: 55 56, on right: 53 54 56
EqualityExpression (63)
    on left: 57 58 59, on right: 55 56 58 59
RelationalExpression (64)
    on left: 60 61 62, on right: 57 58 59 61 62
UnaryExpression (65)
    on left: 63 64, on right: 51 60 61 62 64
PostfixExpression (66)
    on left: 65 66, on right: 63
FunctionCall (67)
    on left: 67 68, on right: 66
ArgumentExpressionList (68)
    on left: 69 70, on right: 67 70
PrimaryExpression (69)
    on left: 71 72, on right: 65 66
QualifiedName (70)
    on left: 73 74, on right: 9 10 74
Literal (71)
    on left: 75 76 77 78 79 80, on right: 71


State 0

    0 $accept: . Program $end

    STRING_TYPE   shift, and go to state 1
    INT_TYPE      shift, and go to state 2
    BOOLEAN_TYPE  shift, and go to state 3
    LONG_TYPE     shift, and go to state 4
    IMPORT        shift, and go to state 5
    ';'           shift, and go to state 6

    Program              go to state 7
    TopLevel             go to state 8
    ImportDeclarations   go to state 9
    ImportDeclaration    go to state 10
    Declaration          go to state 11
    FunctionDeclaration  go to state 12
    VariableDeclaration  go to state 13
    Type                 go to state 14


State 1

   47 Type: STRING_TYPE .

    $default  reduce using rule 47 (Type)


State 2

   45 Type: INT_TYPE .

    $default  reduce using rule 45 (Type)


State 3

   46 Type: BOOLEAN_TYPE .

    $default  reduce using rule 46 (Type)


State 4

   48 Type: LONG_TYPE .

    $default  reduce using rule 48 (Type)


State 5

    8 ImportDeclaration: IMPORT . PackageName ';'

    NAME  shift, and go to state 15

    PackageName    go to state 16
    QualifiedName  go to state 17


State 6

    5 TopLevel: ';' .

    $default  reduce using rule 5 (TopLevel)


State 7

    0 $accept: Program . $end
    2 Program: Program . TopLevel

    $end          shift, and go to state 18
    STRING_TYPE   shift, and go to state 1
    INT_TYPE      shift, and go to state 2
    BOOLEAN_TYPE  shift, and go to state 3
    LONG_TYPE     shift, and go to state 4
    IMPORT        shift, and go to state 5
    ';'           shift, and go to state 6

    TopLevel             go to state 19
    ImportDeclarations   go to state 9
    ImportDeclaration    go to state 10
    Declaration          go to state 11
    FunctionDeclaration  go to state 12
    VariableDeclaration  go to state 13
    Type                 go to state 14


State 8

    1 Program: TopLevel .

    $default  reduce using rule 1 (Program)


State 9

    3 TopLevel: ImportDeclarations . Declaration
    7 ImportDeclarations: ImportDeclarations . ImportDeclaration

    STRING_TYPE   shift, and go to state 1
    INT_TYPE      shift, and go to state 2
    BOOLEAN_TYPE  shift, and go to state 3
    LONG_TYPE     shift, and go to state 4
    IMPORT        shift, and go to state 5

    ImportDeclaration    go to state 20
    Declaration          go to state 21
    FunctionDeclaration  go to state 12
    VariableDeclaration  go to state 13
    Type                 go to state 14


State 10

    6 ImportDeclarations: ImportDeclaration .

    $default  reduce using rule 6 (ImportDeclarations)


State 11

    4 TopLevel: Declaration .

    $default  reduce using rule 4 (TopLevel)


State 12

   11 Declaration: FunctionDeclaration .

    $default  reduce using rule 11 (Declaration)


State 13

   12 Declaration: VariableDeclaration .

    $default  reduce using rule 12 (Declaration)


State 14

   13 FunctionDeclaration: Type . NAME '(' FunctionParamList ')' Block
   14                    | Type . NAME '(' FunctionParamList ')' ';'
   15                    | Type . NAME '(' ')' Block
   16                    | Type . NAME '(' ')' ';'
   17                    | Type . Block
   39 VariableDeclaration: Type . VariableList ';'

    NAME  shift, and go to state 22
    '{'   shift, and go to state 23

    Block         go to state 24
    VariableList  go to state 25
    InitDecl      go to state 26


State 15

   73 QualifiedName: NAME .

    $default  reduce using rule 73 (QualifiedName)


State 16

    8 ImportDeclaration: IMPORT PackageName . ';'

    ';'  shift, and go to state 27


State 17

    9 PackageName: QualifiedName . '.' '*'
   10            | QualifiedName .
   74 QualifiedName: QualifiedName . '.' NAME

    '.'  shift, and go to state 28

    $default  reduce using rule 10 (PackageName)


State 18

    0 $accept: Program $end .

    $default  accept


State 19

    2 Program: Program TopLevel .

    $default  reduce using rule 2 (Program)


State 20

    7 ImportDeclarations: ImportDeclarations ImportDeclaration .

    $default  reduce using rule 7 (ImportDeclarations)


State 21

    3 TopLevel: ImportDeclarations Declaration .

    $default  reduce using rule 3 (TopLevel)


State 22

   13 FunctionDeclaration: Type NAME . '(' FunctionParamList ')' Block
   14                    | Type NAME . '(' FunctionParamList ')' ';'
   15                    | Type NAME . '(' ')' Block
   16                    | Type NAME . '(' ')' ';'
   42 InitDecl: NAME .
   43         | NAME . '=' Initializer

    '('  shift, and go to state 29
    '='  shift, and go to state 30

    $default  reduce using rule 42 (InitDecl)


State 23

   23 Block: '{' . BlockInner '}'
   24      | '{' . '}'

    STRING_TYPE   shift, and go to state 1
    INT_TYPE      shift, and go to state 2
    BOOLEAN_TYPE  shift, and go to state 3
    LONG_TYPE     shift, and go to state 4
    IF            shift, and go to state 31
    RETURN        shift, and go to state 32
    FALSE         shift, and go to state 33
    TRUE          shift, and go to state 34
    INT           shift, and go to state 35
    STRING        shift, and go to state 36
    NAME          shift, and go to state 37
    NULL_LITERAL  shift, and go to state 38
    ';'           shift, and go to state 39
    '('           shift, and go to state 40
    '{'           shift, and go to state 23
    '}'           shift, and go to state 41
    '!'           shift, and go to state 42

    Declaration            go to state 43
    FunctionDeclaration    go to state 12
    Block                  go to state 44
    BlockInner             go to state 45
    Statement              go to state 46
    IfStatement            go to state 47
    ReturnStatement        go to state 48
    ExpressionStatement    go to state 49
    VariableDeclaration    go to state 13
    Type                   go to state 14
    Expression             go to state 50
    AssignmentExpression   go to state 51
    ConditionalExpression  go to state 52
    LogicalANDExpression   go to state 53
    EqualityExpression     go to state 54
    RelationalExpression   go to state 55
    UnaryExpression        go to state 56
    PostfixExpression      go to state 57
    PrimaryExpression      go to state 58
    Literal                go to state 59


State 24

   17 FunctionDeclaration: Type Block .

    $default  reduce using rule 17 (FunctionDeclaration)


State 25

   39 VariableDeclaration: Type VariableList . ';'
   41 VariableList: VariableList . ',' InitDecl

    ';'  shift, and go to state 60
    ','  shift, and go to state 61


State 26

   40 VariableList: InitDecl .

    $default  reduce using rule 40 (VariableList)


State 27

    8 ImportDeclaration: IMPORT PackageName ';' .

    $default  reduce using rule 8 (ImportDeclaration)


State 28

    9 PackageName: QualifiedName '.' . '*'
   74 QualifiedName: QualifiedName '.' . NAME

    NAME  shift, and go to state 62
    '*'   shift, and go to state 63


State 29

   13 FunctionDeclaration: Type NAME '(' . FunctionParamList ')' Block
   14                    | Type NAME '(' . FunctionParamList ')' ';'
   15                    | Type NAME '(' . ')' Block
   16                    | Type NAME '(' . ')' ';'

    STRING_TYPE   shift, and go to state 1
    INT_TYPE      shift, and go to state 2
    BOOLEAN_TYPE  shift, and go to state 3
    LONG_TYPE     shift, and go to state 4
    ')'           shift, and go to state 64
    ','           shift, and go to state 65

    FunctionParamList  go to state 66
    FunctionParam      go to state 67
    Type               go to state 68


State 30

   43 InitDecl: NAME '=' . Initializer

    FALSE         shift, and go to state 33
    TRUE          shift, and go to state 34
    INT           shift, and go to state 35
    STRING        shift, and go to state 36
    NAME          shift, and go to state 37
    NULL_LITERAL  shift, and go to state 38
    '('           shift, and go to state 40
    '!'           shift, and go to state 42

    Initializer            go to state 69
    AssignmentExpression   go to state 70
    ConditionalExpression  go to state 52
    LogicalANDExpression   go to state 53
    EqualityExpression     go to state 54
    RelationalExpression   go to state 55
    UnaryExpression        go to state 56
    PostfixExpression      go to state 57
    PrimaryExpression      go to state 58
    Literal                go to state 59


State 31

   34 IfStatement: IF . '(' Expression ')' Block
   35            | IF . '(' Expression ')' Block ELSE Block

    '('  shift, and go to state 71


State 32

   36 ReturnStatement: RETURN . ';'
   37                | RETURN . Expression ';'

    FALSE         shift, and go to state 33
    TRUE          shift, and go to state 34
    INT           shift, and go to state 35
    STRING        shift, and go to state 36
    NAME          shift, and go to state 37
    NULL_LITERAL  shift, and go to state 38
    ';'           shift, and go to state 72
    '('           shift, and go to state 40
    '!'           shift, and go to state 42

    Expression             go to state 73
    AssignmentExpression   go to state 51
    ConditionalExpression  go to state 52
    LogicalANDExpression   go to state 53
    EqualityExpression     go to state 54
    RelationalExpression   go to state 55
    UnaryExpression        go to state 56
    PostfixExpression      go to state 57
    PrimaryExpression      go to state 58
    Literal                go to state 59


State 33

   77 Literal: FALSE .

    $default  reduce using rule 77 (Literal)


State 34

   76 Literal: TRUE .

    $default  reduce using rule 76 (Literal)


State 35

   75 Literal: INT .

    $default  reduce using rule 75 (Literal)


State 36

   78 Literal: STRING .

    $default  reduce using rule 78 (Literal)


State 37

   80 Literal: NAME .

    $default  reduce using rule 80 (Literal)


State 38

   79 Literal: NULL_LITERAL .

    $default  reduce using rule 79 (Literal)


State 39

   33 Statement: ';' .

    $default  reduce using rule 33 (Statement)


State 40

   72 PrimaryExpression: '(' . Expression ')'

    FALSE         shift, and go to state 33
    TRUE          shift, and go to state 34
    INT           shift, and go to state 35
    STRING        shift, and go to state 36
    NAME          shift, and go to state 37
    NULL_LITERAL  shift, and go to state 38
    '('           shift, and go to state 40
    '!'           shift, and go to state 42

    Expression             go to state 74
    AssignmentExpression   go to state 51
    ConditionalExpression  go to state 52
    LogicalANDExpression   go to state 53
    EqualityExpression     go to state 54
    RelationalExpression   go to state 55
    UnaryExpression        go to state 56
    PostfixExpression      go to state 57
    PrimaryExpression      go to state 58
    Literal                go to state 59


State 41

   24 Block: '{' '}' .

    $default  reduce using rule 24 (Block)


State 42

   64 UnaryExpression: '!' . UnaryExpression

    FALSE         shift, and go to state 33
    TRUE          shift, and go to state 34
    INT           shift, and go to state 35
    STRING        shift, and go to state 36
    NAME          shift, and go to state 37
    NULL_LITERAL  shift, and go to state 38
    '('           shift, and go to state 40
    '!'           shift, and go to state 42

    UnaryExpression    go to state 75
    PostfixExpression  go to state 57
    PrimaryExpression  go to state 58
    Literal            go to state 59


State 43

   26 BlockInner: Declaration .

    $default  reduce using rule 26 (BlockInner)


State 44

   29 Statement: Block .

    $default  reduce using rule 29 (Statement)


State 45

   23 Block: '{' BlockInner . '}'
   27 BlockInner: BlockInner . Statement
   28           | BlockInner . Declaration

    STRING_TYPE   shift, and go to state 1
    INT_TYPE      shift, and go to state 2
    BOOLEAN_TYPE  shift, and go to state 3
    LONG_TYPE     shift, and go to state 4
    IF            shift, and go to state 31
    RETURN        shift, and go to state 32
    FALSE         shift, and go to state 33
    TRUE          shift, and go to state 34
    INT           shift, and go to state 35
    STRING        shift, and go to state 36
    NAME          shift, and go to state 37
    NULL_LITERAL  shift, and go to state 38
    ';'           shift, and go to state 39
    '('           shift, and go to state 40
    '{'           shift, and go to state 23
    '}'           shift, and go to state 76
    '!'           shift, and go to state 42

    Declaration            go to state 77
    FunctionDeclaration    go to state 12
    Block                  go to state 44
    Statement              go to state 78
    IfStatement            go to state 47
    ReturnStatement        go to state 48
    ExpressionStatement    go to state 49
    VariableDeclaration    go to state 13
    Type                   go to state 14
    Expression             go to state 50
    AssignmentExpression   go to state 51
    ConditionalExpression  go to state 52
    LogicalANDExpression   go to state 53
    EqualityExpression     go to state 54
    RelationalExpression   go to state 55
    UnaryExpression        go to state 56
    PostfixExpression      go to state 57
    PrimaryExpression      go to state 58
    Literal                go to state 59


State 46

   25 BlockInner: Statement .

    $default  reduce using rule 25 (BlockInner)


State 47

   30 Statement: IfStatement .

    $default  reduce using rule 30 (Statement)


State 48

   31 Statement: ReturnStatement .

    $default  reduce using rule 31 (Statement)


State 49

   32 Statement: ExpressionStatement .

    $default  reduce using rule 32 (Statement)


State 50

   38 ExpressionStatement: Expression . ';'
   50 Expression: Expression . ',' AssignmentExpression

    ';'  shift, and go to state 79
    ','  shift, and go to state 80


State 51

   49 Expression: AssignmentExpression .

    $default  reduce using rule 49 (Expression)


State 52

   52 AssignmentExpression: ConditionalExpression .
   54 ConditionalExpression: ConditionalExpression . OR LogicalANDExpression

    OR  shift, and go to state 81

    $default  reduce using rule 52 (AssignmentExpression)


State 53

   53 ConditionalExpression: LogicalANDExpression .
   56 LogicalANDExpression: LogicalANDExpression . AND EqualityExpression

    AND  shift, and go to state 82

    $default  reduce using rule 53 (ConditionalExpression)


State 54

   55 LogicalANDExpression: EqualityExpression .
   58 EqualityExpression: EqualityExpression . EQ RelationalExpression
   59                   | EqualityExpression . NE RelationalExpression

    EQ  shift, and go to state 83
    NE  shift, and go to state 84

    $default  reduce using rule 55 (LogicalANDExpression)


State 55

   57 EqualityExpression: RelationalExpression .
   61 RelationalExpression: RelationalExpression . '<' UnaryExpression
   62                     | RelationalExpression . '>' UnaryExpression

    '<'  shift, and go to state 85
    '>'  shift, and go to state 86

    $default  reduce using rule 57 (EqualityExpression)


State 56

   51 AssignmentExpression: UnaryExpression . '=' AssignmentExpression
   60 RelationalExpression: UnaryExpression .

    '='  shift, and go to state 87

    $default  reduce using rule 60 (RelationalExpression)


State 57

   63 UnaryExpression: PostfixExpression .

    $default  reduce using rule 63 (UnaryExpression)


State 58

   65 PostfixExpression: PrimaryExpression .
   66                  | PrimaryExpression . FunctionCall

    '('  shift, and go to state 88

    $default  reduce using rule 65 (PostfixExpression)

    FunctionCall  go to state 89


State 59

   71 PrimaryExpression: Literal .

    $default  reduce using rule 71 (PrimaryExpression)


State 60

   39 VariableDeclaration: Type VariableList ';' .

    $default  reduce using rule 39 (VariableDeclaration)


State 61

   41 VariableList: VariableList ',' . InitDecl

    NAME  shift, and go to state 90

    InitDecl  go to state 91


State 62

   74 QualifiedName: QualifiedName '.' NAME .

    $default  reduce using rule 74 (QualifiedName)


State 63

    9 PackageName: QualifiedName '.' '*' .

    $default  reduce using rule 9 (PackageName)


State 64

   15 FunctionDeclaration: Type NAME '(' ')' . Block
   16                    | Type NAME '(' ')' . ';'

    ';'  shift, and go to state 92
    '{'  shift, and go to state 23

    Block  go to state 93


State 65

   20 FunctionParamList: ',' . VAR_LEN_PARAM

    VAR_LEN_PARAM  shift, and go to state 94


State 66

   13 FunctionDeclaration: Type NAME '(' FunctionParamList . ')' Block
   14                    | Type NAME '(' FunctionParamList . ')' ';'
   19 FunctionParamList: FunctionParamList . ',' FunctionParam

    ')'  shift, and go to state 95
    ','  shift, and go to state 96


State 67

   18 FunctionParamList: FunctionParam .

    $default  reduce using rule 18 (FunctionParamList)


State 68

   21 FunctionParam: Type .
   22              | Type . NAME

    NAME  shift, and go to state 97

    $default  reduce using rule 21 (FunctionParam)


State 69

   43 InitDecl: NAME '=' Initializer .

    $default  reduce using rule 43 (InitDecl)


State 70

   44 Initializer: AssignmentExpression .

    $default  reduce using rule 44 (Initializer)


State 71

   34 IfStatement: IF '(' . Expression ')' Block
   35            | IF '(' . Expression ')' Block ELSE Block

    FALSE         shift, and go to state 33
    TRUE          shift, and go to state 34
    INT           shift, and go to state 35
    STRING        shift, and go to state 36
    NAME          shift, and go to state 37
    NULL_LITERAL  shift, and go to state 38
    '('           shift, and go to state 40
    '!'           shift, and go to state 42

    Expression             go to state 98
    AssignmentExpression   go to state 51
    ConditionalExpression  go to state 52
    LogicalANDExpression   go to state 53
    EqualityExpression     go to state 54
    RelationalExpression   go to state 55
    UnaryExpression        go to state 56
    PostfixExpression      go to state 57
    PrimaryExpression      go to state 58
    Literal                go to state 59


State 72

   36 ReturnStatement: RETURN ';' .

    $default  reduce using rule 36 (ReturnStatement)


State 73

   37 ReturnStatement: RETURN Expression . ';'
   50 Expression: Expression . ',' AssignmentExpression

    ';'  shift, and go to state 99
    ','  shift, and go to state 80


State 74

   50 Expression: Expression . ',' AssignmentExpression
   72 PrimaryExpression: '(' Expression . ')'

    ')'  shift, and go to state 100
    ','  shift, and go to state 80


State 75

   64 UnaryExpression: '!' UnaryExpression .

    $default  reduce using rule 64 (UnaryExpression)


State 76

   23 Block: '{' BlockInner '}' .

    $default  reduce using rule 23 (Block)


State 77

   28 BlockInner: BlockInner Declaration .

    $default  reduce using rule 28 (BlockInner)


State 78

   27 BlockInner: BlockInner Statement .

    $default  reduce using rule 27 (BlockInner)


State 79

   38 ExpressionStatement: Expression ';' .

    $default  reduce using rule 38 (ExpressionStatement)


State 80

   50 Expression: Expression ',' . AssignmentExpression

    FALSE         shift, and go to state 33
    TRUE          shift, and go to state 34
    INT           shift, and go to state 35
    STRING        shift, and go to state 36
    NAME          shift, and go to state 37
    NULL_LITERAL  shift, and go to state 38
    '('           shift, and go to state 40
    '!'           shift, and go to state 42

    AssignmentExpression   go to state 101
    ConditionalExpression  go to state 52
    LogicalANDExpression   go to state 53
    EqualityExpression     go to state 54
    RelationalExpression   go to state 55
    UnaryExpression        go to state 56
    PostfixExpression      go to state 57
    PrimaryExpression      go to state 58
    Literal                go to state 59


State 81

   54 ConditionalExpression: ConditionalExpression OR . LogicalANDExpression

    FALSE         shift, and go to state 33
    TRUE          shift, and go to state 34
    INT           shift, and go to state 35
    STRING        shift, and go to state 36
    NAME          shift, and go to state 37
    NULL_LITERAL  shift, and go to state 38
    '('           shift, and go to state 40
    '!'           shift, and go to state 42

    LogicalANDExpression  go to state 102
    EqualityExpression    go to state 54
    RelationalExpression  go to state 55
    UnaryExpression       go to state 103
    PostfixExpression     go to state 57
    PrimaryExpression     go to state 58
    Literal               go to state 59


State 82

   56 LogicalANDExpression: LogicalANDExpression AND . EqualityExpression

    FALSE         shift, and go to state 33
    TRUE          shift, and go to state 34
    INT           shift, and go to state 35
    STRING        shift, and go to state 36
    NAME          shift, and go to state 37
    NULL_LITERAL  shift, and go to state 38
    '('           shift, and go to state 40
    '!'           shift, and go to state 42

    EqualityExpression    go to state 104
    RelationalExpression  go to state 55
    UnaryExpression       go to state 103
    PostfixExpression     go to state 57
    PrimaryExpression     go to state 58
    Literal               go to state 59


State 83

   58 EqualityExpression: EqualityExpression EQ . RelationalExpression

    FALSE         shift, and go to state 33
    TRUE          shift, and go to state 34
    INT           shift, and go to state 35
    STRING        shift, and go to state 36
    NAME          shift, and go to state 37
    NULL_LITERAL  shift, and go to state 38
    '('           shift, and go to state 40
    '!'           shift, and go to state 42

    RelationalExpression  go to state 105
    UnaryExpression       go to state 103
    PostfixExpression     go to state 57
    PrimaryExpression     go to state 58
    Literal               go to state 59


State 84

   59 EqualityExpression: EqualityExpression NE . RelationalExpression

    FALSE         shift, and go to state 33
    TRUE          shift, and go to state 34
    INT           shift, and go to state 35
    STRING        shift, and go to state 36
    NAME          shift, and go to state 37
    NULL_LITERAL  shift, and go to state 38
    '('           shift, and go to state 40
    '!'           shift, and go to state 42

    RelationalExpression  go to state 106
    UnaryExpression       go to state 103
    PostfixExpression     go to state 57
    PrimaryExpression     go to state 58
    Literal               go to state 59


State 85

   61 RelationalExpression: RelationalExpression '<' . UnaryExpression

    FALSE         shift, and go to state 33
    TRUE          shift, and go to state 34
    INT           shift, and go to state 35
    STRING        shift, and go to state 36
    NAME          shift, and go to state 37
    NULL_LITERAL  shift, and go to state 38
    '('           shift, and go to state 40
    '!'           shift, and go to state 42

    UnaryExpression    go to state 107
    PostfixExpression  go to state 57
    PrimaryExpression  go to state 58
    Literal            go to state 59


State 86

   62 RelationalExpression: RelationalExpression '>' . UnaryExpression

    FALSE         shift, and go to state 33
    TRUE          shift, and go to state 34
    INT           shift, and go to state 35
    STRING        shift, and go to state 36
    NAME          shift, and go to state 37
    NULL_LITERAL  shift, and go to state 38
    '('           shift, and go to state 40
    '!'           shift, and go to state 42

    UnaryExpression    go to state 108
    PostfixExpression  go to state 57
    PrimaryExpression  go to state 58
    Literal            go to state 59


State 87

   51 AssignmentExpression: UnaryExpression '=' . AssignmentExpression

    FALSE         shift, and go to state 33
    TRUE          shift, and go to state 34
    INT           shift, and go to state 35
    STRING        shift, and go to state 36
    NAME          shift, and go to state 37
    NULL_LITERAL  shift, and go to state 38
    '('           shift, and go to state 40
    '!'           shift, and go to state 42

    AssignmentExpression   go to state 109
    ConditionalExpression  go to state 52
    LogicalANDExpression   go to state 53
    EqualityExpression     go to state 54
    RelationalExpression   go to state 55
    UnaryExpression        go to state 56
    PostfixExpression      go to state 57
    PrimaryExpression      go to state 58
    Literal                go to state 59


State 88

   67 FunctionCall: '(' . ArgumentExpressionList ')'
   68             | '(' . ')'

    FALSE         shift, and go to state 33
    TRUE          shift, and go to state 34
    INT           shift, and go to state 35
    STRING        shift, and go to state 36
    NAME          shift, and go to state 37
    NULL_LITERAL  shift, and go to state 38
    '('           shift, and go to state 40
    ')'           shift, and go to state 110
    '!'           shift, and go to state 42

    AssignmentExpression    go to state 111
    ConditionalExpression   go to state 52
    LogicalANDExpression    go to state 53
    EqualityExpression      go to state 54
    RelationalExpression    go to state 55
    UnaryExpression         go to state 56
    PostfixExpression       go to state 57
    ArgumentExpressionList  go to state 112
    PrimaryExpression       go to state 58
    Literal                 go to state 59


State 89

   66 PostfixExpression: PrimaryExpression FunctionCall .

    $default  reduce using rule 66 (PostfixExpression)


State 90

   42 InitDecl: NAME .
   43         | NAME . '=' Initializer

    '='  shift, and go to state 30

    $default  reduce using rule 42 (InitDecl)


State 91

   41 VariableList: VariableList ',' InitDecl .

    $default  reduce using rule 41 (VariableList)


State 92

   16 FunctionDeclaration: Type NAME '(' ')' ';' .

    $default  reduce using rule 16 (FunctionDeclaration)


State 93

   15 FunctionDeclaration: Type NAME '(' ')' Block .

    $default  reduce using rule 15 (FunctionDeclaration)


State 94

   20 FunctionParamList: ',' VAR_LEN_PARAM .

    $default  reduce using rule 20 (FunctionParamList)


State 95

   13 FunctionDeclaration: Type NAME '(' FunctionParamList ')' . Block
   14                    | Type NAME '(' FunctionParamList ')' . ';'

    ';'  shift, and go to state 113
    '{'  shift, and go to state 23

    Block  go to state 114


State 96

   19 FunctionParamList: FunctionParamList ',' . FunctionParam

    STRING_TYPE   shift, and go to state 1
    INT_TYPE      shift, and go to state 2
    BOOLEAN_TYPE  shift, and go to state 3
    LONG_TYPE     shift, and go to state 4

    FunctionParam  go to state 115
    Type           go to state 68


State 97

   22 FunctionParam: Type NAME .

    $default  reduce using rule 22 (FunctionParam)


State 98

   34 IfStatement: IF '(' Expression . ')' Block
   35            | IF '(' Expression . ')' Block ELSE Block
   50 Expression: Expression . ',' AssignmentExpression

    ')'  shift, and go to state 116
    ','  shift, and go to state 80


State 99

   37 ReturnStatement: RETURN Expression ';' .

    $default  reduce using rule 37 (ReturnStatement)


State 100

   72 PrimaryExpression: '(' Expression ')' .

    $default  reduce using rule 72 (PrimaryExpression)


State 101

   50 Expression: Expression ',' AssignmentExpression .

    $default  reduce using rule 50 (Expression)


State 102

   54 ConditionalExpression: ConditionalExpression OR LogicalANDExpression .
   56 LogicalANDExpression: LogicalANDExpression . AND EqualityExpression

    AND  shift, and go to state 82

    $default  reduce using rule 54 (ConditionalExpression)


State 103

   60 RelationalExpression: UnaryExpression .

    $default  reduce using rule 60 (RelationalExpression)


State 104

   56 LogicalANDExpression: LogicalANDExpression AND EqualityExpression .
   58 EqualityExpression: EqualityExpression . EQ RelationalExpression
   59                   | EqualityExpression . NE RelationalExpression

    EQ  shift, and go to state 83
    NE  shift, and go to state 84

    $default  reduce using rule 56 (LogicalANDExpression)


State 105

   58 EqualityExpression: EqualityExpression EQ RelationalExpression .
   61 RelationalExpression: RelationalExpression . '<' UnaryExpression
   62                     | RelationalExpression . '>' UnaryExpression

    '<'  shift, and go to state 85
    '>'  shift, and go to state 86

    $default  reduce using rule 58 (EqualityExpression)


State 106

   59 EqualityExpression: EqualityExpression NE RelationalExpression .
   61 RelationalExpression: RelationalExpression . '<' UnaryExpression
   62                     | RelationalExpression . '>' UnaryExpression

    '<'  shift, and go to state 85
    '>'  shift, and go to state 86

    $default  reduce using rule 59 (EqualityExpression)


State 107

   61 RelationalExpression: RelationalExpression '<' UnaryExpression .

    $default  reduce using rule 61 (RelationalExpression)


State 108

   62 RelationalExpression: RelationalExpression '>' UnaryExpression .

    $default  reduce using rule 62 (RelationalExpression)


State 109

   51 AssignmentExpression: UnaryExpression '=' AssignmentExpression .

    $default  reduce using rule 51 (AssignmentExpression)


State 110

   68 FunctionCall: '(' ')' .

    $default  reduce using rule 68 (FunctionCall)


State 111

   69 ArgumentExpressionList: AssignmentExpression .

    $default  reduce using rule 69 (ArgumentExpressionList)


State 112

   67 FunctionCall: '(' ArgumentExpressionList . ')'
   70 ArgumentExpressionList: ArgumentExpressionList . ',' AssignmentExpression

    ')'  shift, and go to state 117
    ','  shift, and go to state 118


State 113

   14 FunctionDeclaration: Type NAME '(' FunctionParamList ')' ';' .

    $default  reduce using rule 14 (FunctionDeclaration)


State 114

   13 FunctionDeclaration: Type NAME '(' FunctionParamList ')' Block .

    $default  reduce using rule 13 (FunctionDeclaration)


State 115

   19 FunctionParamList: FunctionParamList ',' FunctionParam .

    $default  reduce using rule 19 (FunctionParamList)


State 116

   34 IfStatement: IF '(' Expression ')' . Block
   35            | IF '(' Expression ')' . Block ELSE Block

    '{'  shift, and go to state 23

    Block  go to state 119


State 117

   67 FunctionCall: '(' ArgumentExpressionList ')' .

    $default  reduce using rule 67 (FunctionCall)


State 118

   70 ArgumentExpressionList: ArgumentExpressionList ',' . AssignmentExpression

    FALSE         shift, and go to state 33
    TRUE          shift, and go to state 34
    INT           shift, and go to state 35
    STRING        shift, and go to state 36
    NAME          shift, and go to state 37
    NULL_LITERAL  shift, and go to state 38
    '('           shift, and go to state 40
    '!'           shift, and go to state 42

    AssignmentExpression   go to state 120
    ConditionalExpression  go to state 52
    LogicalANDExpression   go to state 53
    EqualityExpression     go to state 54
    RelationalExpression   go to state 55
    UnaryExpression        go to state 56
    PostfixExpression      go to state 57
    PrimaryExpression      go to state 58
    Literal                go to state 59


State 119

   34 IfStatement: IF '(' Expression ')' Block .
   35            | IF '(' Expression ')' Block . ELSE Block

    ELSE  shift, and go to state 121

    $default  reduce using rule 34 (IfStatement)


State 120

   70 ArgumentExpressionList: ArgumentExpressionList ',' AssignmentExpression .

    $default  reduce using rule 70 (ArgumentExpressionList)


State 121

   35 IfStatement: IF '(' Expression ')' Block ELSE . Block

    '{'  shift, and go to state 23

    Block  go to state 122


State 122

   35 IfStatement: IF '(' Expression ')' Block ELSE Block .

    $default  reduce using rule 35 (IfStatement)
