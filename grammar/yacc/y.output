Terminals which are not used

   EOF_SYMBOL


Grammar

    0 $accept: Program $end

    1 Program: TopLevel
    2        | Program TopLevel

    3 TopLevel: Declaration
    4         | ';'

    5 Declaration: FunctionDeclaration
    6            | VariableDeclaration

    7 FunctionDeclaration: Type NAME '(' FunctionParamList ')' Block
    8                    | Type NAME '(' FunctionParamList ')' ';'
    9                    | Type NAME '(' ')' Block
   10                    | Type NAME '(' ')' ';'
   11                    | Type Block

   12 FunctionParamList: FunctionParam
   13                  | FunctionParamList ',' FunctionParam
   14                  | ',' VAR_LEN_PARAM

   15 FunctionParam: Type
   16              | Type NAME

   17 Block: '{' BlockInner '}'
   18      | '{' '}'

   19 BlockInner: Statement
   20           | Declaration
   21           | BlockInner Statement
   22           | BlockInner Declaration

   23 Statement: Block
   24          | IfStatement
   25          | ReturnStatement
   26          | ForStatement
   27          | ExpressionStatement
   28          | ';'

   29 IfStatement: IF '(' Expression ')' Block
   30            | IF '(' Expression ')' Block ELSE Block

   31 ReturnStatement: RETURN ';'
   32                | RETURN Expression ';'

   33 ForStatement: FOR '(' VariableDeclaration ForInnerExpr ';' ForInnerExpr ')' Block
   34             | FOR '(' AssignmentExpression ';' ForInnerExpr ';' ForInnerExpr ')' Block

   35 ForInnerExpr: Expression
   36             | /* empty */

   37 ExpressionStatement: Expression ';'

   38 VariableDeclaration: Type VariableList ';'

   39 VariableList: InitDecl
   40             | VariableList ',' InitDecl

   41 InitDecl: NAME
   42         | NAME '=' Initializer

   43 Initializer: AssignmentExpression

   44 Type: INT_TYPE
   45     | BOOLEAN_TYPE
   46     | STRING_TYPE

   47 Expression: AssignmentExpression
   48           | Expression ',' AssignmentExpression

   49 AssignmentExpression: UnaryExpression '=' AssignmentExpression
   50                     | ConditionalExpression

   51 ConditionalExpression: LogicalANDExpression
   52                      | ConditionalExpression OR LogicalANDExpression

   53 LogicalANDExpression: EqualityExpression
   54                     | LogicalANDExpression AND EqualityExpression

   55 EqualityExpression: RelationalExpression
   56                   | EqualityExpression EQ RelationalExpression
   57                   | EqualityExpression NE RelationalExpression

   58 RelationalExpression: AdditiveExpression
   59                     | RelationalExpression '<' AdditiveExpression
   60                     | RelationalExpression '>' AdditiveExpression

   61 AdditiveExpression: MultiplicativeExpression
   62                   | AdditiveExpression '+' MultiplicativeExpression
   63                   | AdditiveExpression '-' MultiplicativeExpression

   64 MultiplicativeExpression: UnaryExpression
   65                         | MultiplicativeExpression '*' UnaryExpression
   66                         | MultiplicativeExpression '/' UnaryExpression

   67 UnaryExpression: PostfixExpression
   68                | INC UnaryExpression
   69                | DEC UnaryExpression
   70                | '!' UnaryExpression

   71 PostfixExpression: PrimaryExpression
   72                  | PrimaryExpression FunctionCall

   73 FunctionCall: '(' ArgumentExpressionList ')'
   74             | '(' ')'

   75 ArgumentExpressionList: AssignmentExpression
   76                       | ArgumentExpressionList ',' AssignmentExpression

   77 PrimaryExpression: Literal
   78                  | '(' Expression ')'

   79 Literal: INT
   80        | TRUE
   81        | FALSE
   82        | STRING
   83        | NAME


Terminals, with rules where they appear

$end (0) 0
'!' (33) 70
'(' (40) 7 8 9 10 29 30 33 34 73 74 78
')' (41) 7 8 9 10 29 30 33 34 73 74 78
'*' (42) 65
'+' (43) 62
',' (44) 13 14 40 48 76
'-' (45) 63
'/' (47) 66
';' (59) 4 8 10 28 31 32 33 34 37 38
'<' (60) 59
'=' (61) 42 49
'>' (62) 60
'{' (123) 17 18
'}' (125) 17 18
error (256)
VAR_LEN_PARAM (258) 14
EQ (259) 56
NE (260) 57
AND (261) 54
OR (262) 52
INC (263) 68
DEC (264) 69
STRING_TYPE (265) 46
INT_TYPE (266) 44
BOOLEAN_TYPE (267) 45
IF (268) 29 30
FOR (269) 33 34
ELSE (270) 30
RETURN (271) 31 32
FALSE (272) 81
TRUE (273) 80
INT (274) 79
STRING (275) 82
NAME (276) 7 8 9 10 16 41 42 83
EOF_SYMBOL (277)


Nonterminals, with rules where they appear

$accept (37)
    on left: 0
Program (38)
    on left: 1 2, on right: 0 2
TopLevel (39)
    on left: 3 4, on right: 1 2
Declaration (40)
    on left: 5 6, on right: 3 20 22
FunctionDeclaration (41)
    on left: 7 8 9 10 11, on right: 5
FunctionParamList (42)
    on left: 12 13 14, on right: 7 8 13
FunctionParam (43)
    on left: 15 16, on right: 12 13
Block (44)
    on left: 17 18, on right: 7 9 11 23 29 30 33 34
BlockInner (45)
    on left: 19 20 21 22, on right: 17 21 22
Statement (46)
    on left: 23 24 25 26 27 28, on right: 19 21
IfStatement (47)
    on left: 29 30, on right: 24
ReturnStatement (48)
    on left: 31 32, on right: 25
ForStatement (49)
    on left: 33 34, on right: 26
ForInnerExpr (50)
    on left: 35 36, on right: 33 34
ExpressionStatement (51)
    on left: 37, on right: 27
VariableDeclaration (52)
    on left: 38, on right: 6 33
VariableList (53)
    on left: 39 40, on right: 38 40
InitDecl (54)
    on left: 41 42, on right: 39 40
Initializer (55)
    on left: 43, on right: 42
Type (56)
    on left: 44 45 46, on right: 7 8 9 10 11 15 16 38
Expression (57)
    on left: 47 48, on right: 29 30 32 35 37 48 78
AssignmentExpression (58)
    on left: 49 50, on right: 34 43 47 48 49 75 76
ConditionalExpression (59)
    on left: 51 52, on right: 50 52
LogicalANDExpression (60)
    on left: 53 54, on right: 51 52 54
EqualityExpression (61)
    on left: 55 56 57, on right: 53 54 56 57
RelationalExpression (62)
    on left: 58 59 60, on right: 55 56 57 59 60
AdditiveExpression (63)
    on left: 61 62 63, on right: 58 59 60 62 63
MultiplicativeExpression (64)
    on left: 64 65 66, on right: 61 62 63 65 66
UnaryExpression (65)
    on left: 67 68 69 70, on right: 49 64 65 66 68 69 70
PostfixExpression (66)
    on left: 71 72, on right: 67
FunctionCall (67)
    on left: 73 74, on right: 72
ArgumentExpressionList (68)
    on left: 75 76, on right: 73 76
PrimaryExpression (69)
    on left: 77 78, on right: 71 72
Literal (70)
    on left: 79 80 81 82 83, on right: 77


state 0

    0 $accept: . Program $end

    STRING_TYPE   shift, and go to state 1
    INT_TYPE      shift, and go to state 2
    BOOLEAN_TYPE  shift, and go to state 3
    ';'           shift, and go to state 4

    Program              go to state 5
    TopLevel             go to state 6
    Declaration          go to state 7
    FunctionDeclaration  go to state 8
    VariableDeclaration  go to state 9
    Type                 go to state 10


state 1

   46 Type: STRING_TYPE .

    $default  reduce using rule 46 (Type)


state 2

   44 Type: INT_TYPE .

    $default  reduce using rule 44 (Type)


state 3

   45 Type: BOOLEAN_TYPE .

    $default  reduce using rule 45 (Type)


state 4

    4 TopLevel: ';' .

    $default  reduce using rule 4 (TopLevel)


state 5

    0 $accept: Program . $end
    2 Program: Program . TopLevel

    $end          shift, and go to state 11
    STRING_TYPE   shift, and go to state 1
    INT_TYPE      shift, and go to state 2
    BOOLEAN_TYPE  shift, and go to state 3
    ';'           shift, and go to state 4

    TopLevel             go to state 12
    Declaration          go to state 7
    FunctionDeclaration  go to state 8
    VariableDeclaration  go to state 9
    Type                 go to state 10


state 6

    1 Program: TopLevel .

    $default  reduce using rule 1 (Program)


state 7

    3 TopLevel: Declaration .

    $default  reduce using rule 3 (TopLevel)


state 8

    5 Declaration: FunctionDeclaration .

    $default  reduce using rule 5 (Declaration)


state 9

    6 Declaration: VariableDeclaration .

    $default  reduce using rule 6 (Declaration)


state 10

    7 FunctionDeclaration: Type . NAME '(' FunctionParamList ')' Block
    8                    | Type . NAME '(' FunctionParamList ')' ';'
    9                    | Type . NAME '(' ')' Block
   10                    | Type . NAME '(' ')' ';'
   11                    | Type . Block
   38 VariableDeclaration: Type . VariableList ';'

    NAME  shift, and go to state 13
    '{'   shift, and go to state 14

    Block         go to state 15
    VariableList  go to state 16
    InitDecl      go to state 17


state 11

    0 $accept: Program $end .

    $default  accept


state 12

    2 Program: Program TopLevel .

    $default  reduce using rule 2 (Program)


state 13

    7 FunctionDeclaration: Type NAME . '(' FunctionParamList ')' Block
    8                    | Type NAME . '(' FunctionParamList ')' ';'
    9                    | Type NAME . '(' ')' Block
   10                    | Type NAME . '(' ')' ';'
   41 InitDecl: NAME .
   42         | NAME . '=' Initializer

    '('  shift, and go to state 18
    '='  shift, and go to state 19

    $default  reduce using rule 41 (InitDecl)


state 14

   17 Block: '{' . BlockInner '}'
   18      | '{' . '}'

    INC           shift, and go to state 20
    DEC           shift, and go to state 21
    STRING_TYPE   shift, and go to state 1
    INT_TYPE      shift, and go to state 2
    BOOLEAN_TYPE  shift, and go to state 3
    IF            shift, and go to state 22
    FOR           shift, and go to state 23
    RETURN        shift, and go to state 24
    FALSE         shift, and go to state 25
    TRUE          shift, and go to state 26
    INT           shift, and go to state 27
    STRING        shift, and go to state 28
    NAME          shift, and go to state 29
    ';'           shift, and go to state 30
    '('           shift, and go to state 31
    '{'           shift, and go to state 14
    '}'           shift, and go to state 32
    '!'           shift, and go to state 33

    Declaration               go to state 34
    FunctionDeclaration       go to state 8
    Block                     go to state 35
    BlockInner                go to state 36
    Statement                 go to state 37
    IfStatement               go to state 38
    ReturnStatement           go to state 39
    ForStatement              go to state 40
    ExpressionStatement       go to state 41
    VariableDeclaration       go to state 9
    Type                      go to state 10
    Expression                go to state 42
    AssignmentExpression      go to state 43
    ConditionalExpression     go to state 44
    LogicalANDExpression      go to state 45
    EqualityExpression        go to state 46
    RelationalExpression      go to state 47
    AdditiveExpression        go to state 48
    MultiplicativeExpression  go to state 49
    UnaryExpression           go to state 50
    PostfixExpression         go to state 51
    PrimaryExpression         go to state 52
    Literal                   go to state 53


state 15

   11 FunctionDeclaration: Type Block .

    $default  reduce using rule 11 (FunctionDeclaration)


state 16

   38 VariableDeclaration: Type VariableList . ';'
   40 VariableList: VariableList . ',' InitDecl

    ';'  shift, and go to state 54
    ','  shift, and go to state 55


state 17

   39 VariableList: InitDecl .

    $default  reduce using rule 39 (VariableList)


state 18

    7 FunctionDeclaration: Type NAME '(' . FunctionParamList ')' Block
    8                    | Type NAME '(' . FunctionParamList ')' ';'
    9                    | Type NAME '(' . ')' Block
   10                    | Type NAME '(' . ')' ';'

    STRING_TYPE   shift, and go to state 1
    INT_TYPE      shift, and go to state 2
    BOOLEAN_TYPE  shift, and go to state 3
    ')'           shift, and go to state 56
    ','           shift, and go to state 57

    FunctionParamList  go to state 58
    FunctionParam      go to state 59
    Type               go to state 60


state 19

   42 InitDecl: NAME '=' . Initializer

    INC     shift, and go to state 20
    DEC     shift, and go to state 21
    FALSE   shift, and go to state 25
    TRUE    shift, and go to state 26
    INT     shift, and go to state 27
    STRING  shift, and go to state 28
    NAME    shift, and go to state 29
    '('     shift, and go to state 31
    '!'     shift, and go to state 33

    Initializer               go to state 61
    AssignmentExpression      go to state 62
    ConditionalExpression     go to state 44
    LogicalANDExpression      go to state 45
    EqualityExpression        go to state 46
    RelationalExpression      go to state 47
    AdditiveExpression        go to state 48
    MultiplicativeExpression  go to state 49
    UnaryExpression           go to state 50
    PostfixExpression         go to state 51
    PrimaryExpression         go to state 52
    Literal                   go to state 53


state 20

   68 UnaryExpression: INC . UnaryExpression

    INC     shift, and go to state 20
    DEC     shift, and go to state 21
    FALSE   shift, and go to state 25
    TRUE    shift, and go to state 26
    INT     shift, and go to state 27
    STRING  shift, and go to state 28
    NAME    shift, and go to state 29
    '('     shift, and go to state 31
    '!'     shift, and go to state 33

    UnaryExpression    go to state 63
    PostfixExpression  go to state 51
    PrimaryExpression  go to state 52
    Literal            go to state 53


state 21

   69 UnaryExpression: DEC . UnaryExpression

    INC     shift, and go to state 20
    DEC     shift, and go to state 21
    FALSE   shift, and go to state 25
    TRUE    shift, and go to state 26
    INT     shift, and go to state 27
    STRING  shift, and go to state 28
    NAME    shift, and go to state 29
    '('     shift, and go to state 31
    '!'     shift, and go to state 33

    UnaryExpression    go to state 64
    PostfixExpression  go to state 51
    PrimaryExpression  go to state 52
    Literal            go to state 53


state 22

   29 IfStatement: IF . '(' Expression ')' Block
   30            | IF . '(' Expression ')' Block ELSE Block

    '('  shift, and go to state 65


state 23

   33 ForStatement: FOR . '(' VariableDeclaration ForInnerExpr ';' ForInnerExpr ')' Block
   34             | FOR . '(' AssignmentExpression ';' ForInnerExpr ';' ForInnerExpr ')' Block

    '('  shift, and go to state 66


state 24

   31 ReturnStatement: RETURN . ';'
   32                | RETURN . Expression ';'

    INC     shift, and go to state 20
    DEC     shift, and go to state 21
    FALSE   shift, and go to state 25
    TRUE    shift, and go to state 26
    INT     shift, and go to state 27
    STRING  shift, and go to state 28
    NAME    shift, and go to state 29
    ';'     shift, and go to state 67
    '('     shift, and go to state 31
    '!'     shift, and go to state 33

    Expression                go to state 68
    AssignmentExpression      go to state 43
    ConditionalExpression     go to state 44
    LogicalANDExpression      go to state 45
    EqualityExpression        go to state 46
    RelationalExpression      go to state 47
    AdditiveExpression        go to state 48
    MultiplicativeExpression  go to state 49
    UnaryExpression           go to state 50
    PostfixExpression         go to state 51
    PrimaryExpression         go to state 52
    Literal                   go to state 53


state 25

   81 Literal: FALSE .

    $default  reduce using rule 81 (Literal)


state 26

   80 Literal: TRUE .

    $default  reduce using rule 80 (Literal)


state 27

   79 Literal: INT .

    $default  reduce using rule 79 (Literal)


state 28

   82 Literal: STRING .

    $default  reduce using rule 82 (Literal)


state 29

   83 Literal: NAME .

    $default  reduce using rule 83 (Literal)


state 30

   28 Statement: ';' .

    $default  reduce using rule 28 (Statement)


state 31

   78 PrimaryExpression: '(' . Expression ')'

    INC     shift, and go to state 20
    DEC     shift, and go to state 21
    FALSE   shift, and go to state 25
    TRUE    shift, and go to state 26
    INT     shift, and go to state 27
    STRING  shift, and go to state 28
    NAME    shift, and go to state 29
    '('     shift, and go to state 31
    '!'     shift, and go to state 33

    Expression                go to state 69
    AssignmentExpression      go to state 43
    ConditionalExpression     go to state 44
    LogicalANDExpression      go to state 45
    EqualityExpression        go to state 46
    RelationalExpression      go to state 47
    AdditiveExpression        go to state 48
    MultiplicativeExpression  go to state 49
    UnaryExpression           go to state 50
    PostfixExpression         go to state 51
    PrimaryExpression         go to state 52
    Literal                   go to state 53


state 32

   18 Block: '{' '}' .

    $default  reduce using rule 18 (Block)


state 33

   70 UnaryExpression: '!' . UnaryExpression

    INC     shift, and go to state 20
    DEC     shift, and go to state 21
    FALSE   shift, and go to state 25
    TRUE    shift, and go to state 26
    INT     shift, and go to state 27
    STRING  shift, and go to state 28
    NAME    shift, and go to state 29
    '('     shift, and go to state 31
    '!'     shift, and go to state 33

    UnaryExpression    go to state 70
    PostfixExpression  go to state 51
    PrimaryExpression  go to state 52
    Literal            go to state 53


state 34

   20 BlockInner: Declaration .

    $default  reduce using rule 20 (BlockInner)


state 35

   23 Statement: Block .

    $default  reduce using rule 23 (Statement)


state 36

   17 Block: '{' BlockInner . '}'
   21 BlockInner: BlockInner . Statement
   22           | BlockInner . Declaration

    INC           shift, and go to state 20
    DEC           shift, and go to state 21
    STRING_TYPE   shift, and go to state 1
    INT_TYPE      shift, and go to state 2
    BOOLEAN_TYPE  shift, and go to state 3
    IF            shift, and go to state 22
    FOR           shift, and go to state 23
    RETURN        shift, and go to state 24
    FALSE         shift, and go to state 25
    TRUE          shift, and go to state 26
    INT           shift, and go to state 27
    STRING        shift, and go to state 28
    NAME          shift, and go to state 29
    ';'           shift, and go to state 30
    '('           shift, and go to state 31
    '{'           shift, and go to state 14
    '}'           shift, and go to state 71
    '!'           shift, and go to state 33

    Declaration               go to state 72
    FunctionDeclaration       go to state 8
    Block                     go to state 35
    Statement                 go to state 73
    IfStatement               go to state 38
    ReturnStatement           go to state 39
    ForStatement              go to state 40
    ExpressionStatement       go to state 41
    VariableDeclaration       go to state 9
    Type                      go to state 10
    Expression                go to state 42
    AssignmentExpression      go to state 43
    ConditionalExpression     go to state 44
    LogicalANDExpression      go to state 45
    EqualityExpression        go to state 46
    RelationalExpression      go to state 47
    AdditiveExpression        go to state 48
    MultiplicativeExpression  go to state 49
    UnaryExpression           go to state 50
    PostfixExpression         go to state 51
    PrimaryExpression         go to state 52
    Literal                   go to state 53


state 37

   19 BlockInner: Statement .

    $default  reduce using rule 19 (BlockInner)


state 38

   24 Statement: IfStatement .

    $default  reduce using rule 24 (Statement)


state 39

   25 Statement: ReturnStatement .

    $default  reduce using rule 25 (Statement)


state 40

   26 Statement: ForStatement .

    $default  reduce using rule 26 (Statement)


state 41

   27 Statement: ExpressionStatement .

    $default  reduce using rule 27 (Statement)


state 42

   37 ExpressionStatement: Expression . ';'
   48 Expression: Expression . ',' AssignmentExpression

    ';'  shift, and go to state 74
    ','  shift, and go to state 75


state 43

   47 Expression: AssignmentExpression .

    $default  reduce using rule 47 (Expression)


state 44

   50 AssignmentExpression: ConditionalExpression .
   52 ConditionalExpression: ConditionalExpression . OR LogicalANDExpression

    OR  shift, and go to state 76

    $default  reduce using rule 50 (AssignmentExpression)


state 45

   51 ConditionalExpression: LogicalANDExpression .
   54 LogicalANDExpression: LogicalANDExpression . AND EqualityExpression

    AND  shift, and go to state 77

    $default  reduce using rule 51 (ConditionalExpression)


state 46

   53 LogicalANDExpression: EqualityExpression .
   56 EqualityExpression: EqualityExpression . EQ RelationalExpression
   57                   | EqualityExpression . NE RelationalExpression

    EQ  shift, and go to state 78
    NE  shift, and go to state 79

    $default  reduce using rule 53 (LogicalANDExpression)


state 47

   55 EqualityExpression: RelationalExpression .
   59 RelationalExpression: RelationalExpression . '<' AdditiveExpression
   60                     | RelationalExpression . '>' AdditiveExpression

    '<'  shift, and go to state 80
    '>'  shift, and go to state 81

    $default  reduce using rule 55 (EqualityExpression)


state 48

   58 RelationalExpression: AdditiveExpression .
   62 AdditiveExpression: AdditiveExpression . '+' MultiplicativeExpression
   63                   | AdditiveExpression . '-' MultiplicativeExpression

    '+'  shift, and go to state 82
    '-'  shift, and go to state 83

    $default  reduce using rule 58 (RelationalExpression)


state 49

   61 AdditiveExpression: MultiplicativeExpression .
   65 MultiplicativeExpression: MultiplicativeExpression . '*' UnaryExpression
   66                         | MultiplicativeExpression . '/' UnaryExpression

    '*'  shift, and go to state 84
    '/'  shift, and go to state 85

    $default  reduce using rule 61 (AdditiveExpression)


state 50

   49 AssignmentExpression: UnaryExpression . '=' AssignmentExpression
   64 MultiplicativeExpression: UnaryExpression .

    '='  shift, and go to state 86

    $default  reduce using rule 64 (MultiplicativeExpression)


state 51

   67 UnaryExpression: PostfixExpression .

    $default  reduce using rule 67 (UnaryExpression)


state 52

   71 PostfixExpression: PrimaryExpression .
   72                  | PrimaryExpression . FunctionCall

    '('  shift, and go to state 87

    $default  reduce using rule 71 (PostfixExpression)

    FunctionCall  go to state 88


state 53

   77 PrimaryExpression: Literal .

    $default  reduce using rule 77 (PrimaryExpression)


state 54

   38 VariableDeclaration: Type VariableList ';' .

    $default  reduce using rule 38 (VariableDeclaration)


state 55

   40 VariableList: VariableList ',' . InitDecl

    NAME  shift, and go to state 89

    InitDecl  go to state 90


state 56

    9 FunctionDeclaration: Type NAME '(' ')' . Block
   10                    | Type NAME '(' ')' . ';'

    ';'  shift, and go to state 91
    '{'  shift, and go to state 14

    Block  go to state 92


state 57

   14 FunctionParamList: ',' . VAR_LEN_PARAM

    VAR_LEN_PARAM  shift, and go to state 93


state 58

    7 FunctionDeclaration: Type NAME '(' FunctionParamList . ')' Block
    8                    | Type NAME '(' FunctionParamList . ')' ';'
   13 FunctionParamList: FunctionParamList . ',' FunctionParam

    ')'  shift, and go to state 94
    ','  shift, and go to state 95


state 59

   12 FunctionParamList: FunctionParam .

    $default  reduce using rule 12 (FunctionParamList)


state 60

   15 FunctionParam: Type .
   16              | Type . NAME

    NAME  shift, and go to state 96

    $default  reduce using rule 15 (FunctionParam)


state 61

   42 InitDecl: NAME '=' Initializer .

    $default  reduce using rule 42 (InitDecl)


state 62

   43 Initializer: AssignmentExpression .

    $default  reduce using rule 43 (Initializer)


state 63

   68 UnaryExpression: INC UnaryExpression .

    $default  reduce using rule 68 (UnaryExpression)


state 64

   69 UnaryExpression: DEC UnaryExpression .

    $default  reduce using rule 69 (UnaryExpression)


state 65

   29 IfStatement: IF '(' . Expression ')' Block
   30            | IF '(' . Expression ')' Block ELSE Block

    INC     shift, and go to state 20
    DEC     shift, and go to state 21
    FALSE   shift, and go to state 25
    TRUE    shift, and go to state 26
    INT     shift, and go to state 27
    STRING  shift, and go to state 28
    NAME    shift, and go to state 29
    '('     shift, and go to state 31
    '!'     shift, and go to state 33

    Expression                go to state 97
    AssignmentExpression      go to state 43
    ConditionalExpression     go to state 44
    LogicalANDExpression      go to state 45
    EqualityExpression        go to state 46
    RelationalExpression      go to state 47
    AdditiveExpression        go to state 48
    MultiplicativeExpression  go to state 49
    UnaryExpression           go to state 50
    PostfixExpression         go to state 51
    PrimaryExpression         go to state 52
    Literal                   go to state 53


state 66

   33 ForStatement: FOR '(' . VariableDeclaration ForInnerExpr ';' ForInnerExpr ')' Block
   34             | FOR '(' . AssignmentExpression ';' ForInnerExpr ';' ForInnerExpr ')' Block

    INC           shift, and go to state 20
    DEC           shift, and go to state 21
    STRING_TYPE   shift, and go to state 1
    INT_TYPE      shift, and go to state 2
    BOOLEAN_TYPE  shift, and go to state 3
    FALSE         shift, and go to state 25
    TRUE          shift, and go to state 26
    INT           shift, and go to state 27
    STRING        shift, and go to state 28
    NAME          shift, and go to state 29
    '('           shift, and go to state 31
    '!'           shift, and go to state 33

    VariableDeclaration       go to state 98
    Type                      go to state 99
    AssignmentExpression      go to state 100
    ConditionalExpression     go to state 44
    LogicalANDExpression      go to state 45
    EqualityExpression        go to state 46
    RelationalExpression      go to state 47
    AdditiveExpression        go to state 48
    MultiplicativeExpression  go to state 49
    UnaryExpression           go to state 50
    PostfixExpression         go to state 51
    PrimaryExpression         go to state 52
    Literal                   go to state 53


state 67

   31 ReturnStatement: RETURN ';' .

    $default  reduce using rule 31 (ReturnStatement)


state 68

   32 ReturnStatement: RETURN Expression . ';'
   48 Expression: Expression . ',' AssignmentExpression

    ';'  shift, and go to state 101
    ','  shift, and go to state 75


state 69

   48 Expression: Expression . ',' AssignmentExpression
   78 PrimaryExpression: '(' Expression . ')'

    ')'  shift, and go to state 102
    ','  shift, and go to state 75


state 70

   70 UnaryExpression: '!' UnaryExpression .

    $default  reduce using rule 70 (UnaryExpression)


state 71

   17 Block: '{' BlockInner '}' .

    $default  reduce using rule 17 (Block)


state 72

   22 BlockInner: BlockInner Declaration .

    $default  reduce using rule 22 (BlockInner)


state 73

   21 BlockInner: BlockInner Statement .

    $default  reduce using rule 21 (BlockInner)


state 74

   37 ExpressionStatement: Expression ';' .

    $default  reduce using rule 37 (ExpressionStatement)


state 75

   48 Expression: Expression ',' . AssignmentExpression

    INC     shift, and go to state 20
    DEC     shift, and go to state 21
    FALSE   shift, and go to state 25
    TRUE    shift, and go to state 26
    INT     shift, and go to state 27
    STRING  shift, and go to state 28
    NAME    shift, and go to state 29
    '('     shift, and go to state 31
    '!'     shift, and go to state 33

    AssignmentExpression      go to state 103
    ConditionalExpression     go to state 44
    LogicalANDExpression      go to state 45
    EqualityExpression        go to state 46
    RelationalExpression      go to state 47
    AdditiveExpression        go to state 48
    MultiplicativeExpression  go to state 49
    UnaryExpression           go to state 50
    PostfixExpression         go to state 51
    PrimaryExpression         go to state 52
    Literal                   go to state 53


state 76

   52 ConditionalExpression: ConditionalExpression OR . LogicalANDExpression

    INC     shift, and go to state 20
    DEC     shift, and go to state 21
    FALSE   shift, and go to state 25
    TRUE    shift, and go to state 26
    INT     shift, and go to state 27
    STRING  shift, and go to state 28
    NAME    shift, and go to state 29
    '('     shift, and go to state 31
    '!'     shift, and go to state 33

    LogicalANDExpression      go to state 104
    EqualityExpression        go to state 46
    RelationalExpression      go to state 47
    AdditiveExpression        go to state 48
    MultiplicativeExpression  go to state 49
    UnaryExpression           go to state 105
    PostfixExpression         go to state 51
    PrimaryExpression         go to state 52
    Literal                   go to state 53


state 77

   54 LogicalANDExpression: LogicalANDExpression AND . EqualityExpression

    INC     shift, and go to state 20
    DEC     shift, and go to state 21
    FALSE   shift, and go to state 25
    TRUE    shift, and go to state 26
    INT     shift, and go to state 27
    STRING  shift, and go to state 28
    NAME    shift, and go to state 29
    '('     shift, and go to state 31
    '!'     shift, and go to state 33

    EqualityExpression        go to state 106
    RelationalExpression      go to state 47
    AdditiveExpression        go to state 48
    MultiplicativeExpression  go to state 49
    UnaryExpression           go to state 105
    PostfixExpression         go to state 51
    PrimaryExpression         go to state 52
    Literal                   go to state 53


state 78

   56 EqualityExpression: EqualityExpression EQ . RelationalExpression

    INC     shift, and go to state 20
    DEC     shift, and go to state 21
    FALSE   shift, and go to state 25
    TRUE    shift, and go to state 26
    INT     shift, and go to state 27
    STRING  shift, and go to state 28
    NAME    shift, and go to state 29
    '('     shift, and go to state 31
    '!'     shift, and go to state 33

    RelationalExpression      go to state 107
    AdditiveExpression        go to state 48
    MultiplicativeExpression  go to state 49
    UnaryExpression           go to state 105
    PostfixExpression         go to state 51
    PrimaryExpression         go to state 52
    Literal                   go to state 53


state 79

   57 EqualityExpression: EqualityExpression NE . RelationalExpression

    INC     shift, and go to state 20
    DEC     shift, and go to state 21
    FALSE   shift, and go to state 25
    TRUE    shift, and go to state 26
    INT     shift, and go to state 27
    STRING  shift, and go to state 28
    NAME    shift, and go to state 29
    '('     shift, and go to state 31
    '!'     shift, and go to state 33

    RelationalExpression      go to state 108
    AdditiveExpression        go to state 48
    MultiplicativeExpression  go to state 49
    UnaryExpression           go to state 105
    PostfixExpression         go to state 51
    PrimaryExpression         go to state 52
    Literal                   go to state 53


state 80

   59 RelationalExpression: RelationalExpression '<' . AdditiveExpression

    INC     shift, and go to state 20
    DEC     shift, and go to state 21
    FALSE   shift, and go to state 25
    TRUE    shift, and go to state 26
    INT     shift, and go to state 27
    STRING  shift, and go to state 28
    NAME    shift, and go to state 29
    '('     shift, and go to state 31
    '!'     shift, and go to state 33

    AdditiveExpression        go to state 109
    MultiplicativeExpression  go to state 49
    UnaryExpression           go to state 105
    PostfixExpression         go to state 51
    PrimaryExpression         go to state 52
    Literal                   go to state 53


state 81

   60 RelationalExpression: RelationalExpression '>' . AdditiveExpression

    INC     shift, and go to state 20
    DEC     shift, and go to state 21
    FALSE   shift, and go to state 25
    TRUE    shift, and go to state 26
    INT     shift, and go to state 27
    STRING  shift, and go to state 28
    NAME    shift, and go to state 29
    '('     shift, and go to state 31
    '!'     shift, and go to state 33

    AdditiveExpression        go to state 110
    MultiplicativeExpression  go to state 49
    UnaryExpression           go to state 105
    PostfixExpression         go to state 51
    PrimaryExpression         go to state 52
    Literal                   go to state 53


state 82

   62 AdditiveExpression: AdditiveExpression '+' . MultiplicativeExpression

    INC     shift, and go to state 20
    DEC     shift, and go to state 21
    FALSE   shift, and go to state 25
    TRUE    shift, and go to state 26
    INT     shift, and go to state 27
    STRING  shift, and go to state 28
    NAME    shift, and go to state 29
    '('     shift, and go to state 31
    '!'     shift, and go to state 33

    MultiplicativeExpression  go to state 111
    UnaryExpression           go to state 105
    PostfixExpression         go to state 51
    PrimaryExpression         go to state 52
    Literal                   go to state 53


state 83

   63 AdditiveExpression: AdditiveExpression '-' . MultiplicativeExpression

    INC     shift, and go to state 20
    DEC     shift, and go to state 21
    FALSE   shift, and go to state 25
    TRUE    shift, and go to state 26
    INT     shift, and go to state 27
    STRING  shift, and go to state 28
    NAME    shift, and go to state 29
    '('     shift, and go to state 31
    '!'     shift, and go to state 33

    MultiplicativeExpression  go to state 112
    UnaryExpression           go to state 105
    PostfixExpression         go to state 51
    PrimaryExpression         go to state 52
    Literal                   go to state 53


state 84

   65 MultiplicativeExpression: MultiplicativeExpression '*' . UnaryExpression

    INC     shift, and go to state 20
    DEC     shift, and go to state 21
    FALSE   shift, and go to state 25
    TRUE    shift, and go to state 26
    INT     shift, and go to state 27
    STRING  shift, and go to state 28
    NAME    shift, and go to state 29
    '('     shift, and go to state 31
    '!'     shift, and go to state 33

    UnaryExpression    go to state 113
    PostfixExpression  go to state 51
    PrimaryExpression  go to state 52
    Literal            go to state 53


state 85

   66 MultiplicativeExpression: MultiplicativeExpression '/' . UnaryExpression

    INC     shift, and go to state 20
    DEC     shift, and go to state 21
    FALSE   shift, and go to state 25
    TRUE    shift, and go to state 26
    INT     shift, and go to state 27
    STRING  shift, and go to state 28
    NAME    shift, and go to state 29
    '('     shift, and go to state 31
    '!'     shift, and go to state 33

    UnaryExpression    go to state 114
    PostfixExpression  go to state 51
    PrimaryExpression  go to state 52
    Literal            go to state 53


state 86

   49 AssignmentExpression: UnaryExpression '=' . AssignmentExpression

    INC     shift, and go to state 20
    DEC     shift, and go to state 21
    FALSE   shift, and go to state 25
    TRUE    shift, and go to state 26
    INT     shift, and go to state 27
    STRING  shift, and go to state 28
    NAME    shift, and go to state 29
    '('     shift, and go to state 31
    '!'     shift, and go to state 33

    AssignmentExpression      go to state 115
    ConditionalExpression     go to state 44
    LogicalANDExpression      go to state 45
    EqualityExpression        go to state 46
    RelationalExpression      go to state 47
    AdditiveExpression        go to state 48
    MultiplicativeExpression  go to state 49
    UnaryExpression           go to state 50
    PostfixExpression         go to state 51
    PrimaryExpression         go to state 52
    Literal                   go to state 53


state 87

   73 FunctionCall: '(' . ArgumentExpressionList ')'
   74             | '(' . ')'

    INC     shift, and go to state 20
    DEC     shift, and go to state 21
    FALSE   shift, and go to state 25
    TRUE    shift, and go to state 26
    INT     shift, and go to state 27
    STRING  shift, and go to state 28
    NAME    shift, and go to state 29
    '('     shift, and go to state 31
    ')'     shift, and go to state 116
    '!'     shift, and go to state 33

    AssignmentExpression      go to state 117
    ConditionalExpression     go to state 44
    LogicalANDExpression      go to state 45
    EqualityExpression        go to state 46
    RelationalExpression      go to state 47
    AdditiveExpression        go to state 48
    MultiplicativeExpression  go to state 49
    UnaryExpression           go to state 50
    PostfixExpression         go to state 51
    ArgumentExpressionList    go to state 118
    PrimaryExpression         go to state 52
    Literal                   go to state 53


state 88

   72 PostfixExpression: PrimaryExpression FunctionCall .

    $default  reduce using rule 72 (PostfixExpression)


state 89

   41 InitDecl: NAME .
   42         | NAME . '=' Initializer

    '='  shift, and go to state 19

    $default  reduce using rule 41 (InitDecl)


state 90

   40 VariableList: VariableList ',' InitDecl .

    $default  reduce using rule 40 (VariableList)


state 91

   10 FunctionDeclaration: Type NAME '(' ')' ';' .

    $default  reduce using rule 10 (FunctionDeclaration)


state 92

    9 FunctionDeclaration: Type NAME '(' ')' Block .

    $default  reduce using rule 9 (FunctionDeclaration)


state 93

   14 FunctionParamList: ',' VAR_LEN_PARAM .

    $default  reduce using rule 14 (FunctionParamList)


state 94

    7 FunctionDeclaration: Type NAME '(' FunctionParamList ')' . Block
    8                    | Type NAME '(' FunctionParamList ')' . ';'

    ';'  shift, and go to state 119
    '{'  shift, and go to state 14

    Block  go to state 120


state 95

   13 FunctionParamList: FunctionParamList ',' . FunctionParam

    STRING_TYPE   shift, and go to state 1
    INT_TYPE      shift, and go to state 2
    BOOLEAN_TYPE  shift, and go to state 3

    FunctionParam  go to state 121
    Type           go to state 60


state 96

   16 FunctionParam: Type NAME .

    $default  reduce using rule 16 (FunctionParam)


state 97

   29 IfStatement: IF '(' Expression . ')' Block
   30            | IF '(' Expression . ')' Block ELSE Block
   48 Expression: Expression . ',' AssignmentExpression

    ')'  shift, and go to state 122
    ','  shift, and go to state 75


state 98

   33 ForStatement: FOR '(' VariableDeclaration . ForInnerExpr ';' ForInnerExpr ')' Block

    INC     shift, and go to state 20
    DEC     shift, and go to state 21
    FALSE   shift, and go to state 25
    TRUE    shift, and go to state 26
    INT     shift, and go to state 27
    STRING  shift, and go to state 28
    NAME    shift, and go to state 29
    '('     shift, and go to state 31
    '!'     shift, and go to state 33

    $default  reduce using rule 36 (ForInnerExpr)

    ForInnerExpr              go to state 123
    Expression                go to state 124
    AssignmentExpression      go to state 43
    ConditionalExpression     go to state 44
    LogicalANDExpression      go to state 45
    EqualityExpression        go to state 46
    RelationalExpression      go to state 47
    AdditiveExpression        go to state 48
    MultiplicativeExpression  go to state 49
    UnaryExpression           go to state 50
    PostfixExpression         go to state 51
    PrimaryExpression         go to state 52
    Literal                   go to state 53


state 99

   38 VariableDeclaration: Type . VariableList ';'

    NAME  shift, and go to state 89

    VariableList  go to state 16
    InitDecl      go to state 17


state 100

   34 ForStatement: FOR '(' AssignmentExpression . ';' ForInnerExpr ';' ForInnerExpr ')' Block

    ';'  shift, and go to state 125


state 101

   32 ReturnStatement: RETURN Expression ';' .

    $default  reduce using rule 32 (ReturnStatement)


state 102

   78 PrimaryExpression: '(' Expression ')' .

    $default  reduce using rule 78 (PrimaryExpression)


state 103

   48 Expression: Expression ',' AssignmentExpression .

    $default  reduce using rule 48 (Expression)


state 104

   52 ConditionalExpression: ConditionalExpression OR LogicalANDExpression .
   54 LogicalANDExpression: LogicalANDExpression . AND EqualityExpression

    AND  shift, and go to state 77

    $default  reduce using rule 52 (ConditionalExpression)


state 105

   64 MultiplicativeExpression: UnaryExpression .

    $default  reduce using rule 64 (MultiplicativeExpression)


state 106

   54 LogicalANDExpression: LogicalANDExpression AND EqualityExpression .
   56 EqualityExpression: EqualityExpression . EQ RelationalExpression
   57                   | EqualityExpression . NE RelationalExpression

    EQ  shift, and go to state 78
    NE  shift, and go to state 79

    $default  reduce using rule 54 (LogicalANDExpression)


state 107

   56 EqualityExpression: EqualityExpression EQ RelationalExpression .
   59 RelationalExpression: RelationalExpression . '<' AdditiveExpression
   60                     | RelationalExpression . '>' AdditiveExpression

    '<'  shift, and go to state 80
    '>'  shift, and go to state 81

    $default  reduce using rule 56 (EqualityExpression)


state 108

   57 EqualityExpression: EqualityExpression NE RelationalExpression .
   59 RelationalExpression: RelationalExpression . '<' AdditiveExpression
   60                     | RelationalExpression . '>' AdditiveExpression

    '<'  shift, and go to state 80
    '>'  shift, and go to state 81

    $default  reduce using rule 57 (EqualityExpression)


state 109

   59 RelationalExpression: RelationalExpression '<' AdditiveExpression .
   62 AdditiveExpression: AdditiveExpression . '+' MultiplicativeExpression
   63                   | AdditiveExpression . '-' MultiplicativeExpression

    '+'  shift, and go to state 82
    '-'  shift, and go to state 83

    $default  reduce using rule 59 (RelationalExpression)


state 110

   60 RelationalExpression: RelationalExpression '>' AdditiveExpression .
   62 AdditiveExpression: AdditiveExpression . '+' MultiplicativeExpression
   63                   | AdditiveExpression . '-' MultiplicativeExpression

    '+'  shift, and go to state 82
    '-'  shift, and go to state 83

    $default  reduce using rule 60 (RelationalExpression)


state 111

   62 AdditiveExpression: AdditiveExpression '+' MultiplicativeExpression .
   65 MultiplicativeExpression: MultiplicativeExpression . '*' UnaryExpression
   66                         | MultiplicativeExpression . '/' UnaryExpression

    '*'  shift, and go to state 84
    '/'  shift, and go to state 85

    $default  reduce using rule 62 (AdditiveExpression)


state 112

   63 AdditiveExpression: AdditiveExpression '-' MultiplicativeExpression .
   65 MultiplicativeExpression: MultiplicativeExpression . '*' UnaryExpression
   66                         | MultiplicativeExpression . '/' UnaryExpression

    '*'  shift, and go to state 84
    '/'  shift, and go to state 85

    $default  reduce using rule 63 (AdditiveExpression)


state 113

   65 MultiplicativeExpression: MultiplicativeExpression '*' UnaryExpression .

    $default  reduce using rule 65 (MultiplicativeExpression)


state 114

   66 MultiplicativeExpression: MultiplicativeExpression '/' UnaryExpression .

    $default  reduce using rule 66 (MultiplicativeExpression)


state 115

   49 AssignmentExpression: UnaryExpression '=' AssignmentExpression .

    $default  reduce using rule 49 (AssignmentExpression)


state 116

   74 FunctionCall: '(' ')' .

    $default  reduce using rule 74 (FunctionCall)


state 117

   75 ArgumentExpressionList: AssignmentExpression .

    $default  reduce using rule 75 (ArgumentExpressionList)


state 118

   73 FunctionCall: '(' ArgumentExpressionList . ')'
   76 ArgumentExpressionList: ArgumentExpressionList . ',' AssignmentExpression

    ')'  shift, and go to state 126
    ','  shift, and go to state 127


state 119

    8 FunctionDeclaration: Type NAME '(' FunctionParamList ')' ';' .

    $default  reduce using rule 8 (FunctionDeclaration)


state 120

    7 FunctionDeclaration: Type NAME '(' FunctionParamList ')' Block .

    $default  reduce using rule 7 (FunctionDeclaration)


state 121

   13 FunctionParamList: FunctionParamList ',' FunctionParam .

    $default  reduce using rule 13 (FunctionParamList)


state 122

   29 IfStatement: IF '(' Expression ')' . Block
   30            | IF '(' Expression ')' . Block ELSE Block

    '{'  shift, and go to state 14

    Block  go to state 128


state 123

   33 ForStatement: FOR '(' VariableDeclaration ForInnerExpr . ';' ForInnerExpr ')' Block

    ';'  shift, and go to state 129


state 124

   35 ForInnerExpr: Expression .
   48 Expression: Expression . ',' AssignmentExpression

    ','  shift, and go to state 75

    $default  reduce using rule 35 (ForInnerExpr)


state 125

   34 ForStatement: FOR '(' AssignmentExpression ';' . ForInnerExpr ';' ForInnerExpr ')' Block

    INC     shift, and go to state 20
    DEC     shift, and go to state 21
    FALSE   shift, and go to state 25
    TRUE    shift, and go to state 26
    INT     shift, and go to state 27
    STRING  shift, and go to state 28
    NAME    shift, and go to state 29
    '('     shift, and go to state 31
    '!'     shift, and go to state 33

    $default  reduce using rule 36 (ForInnerExpr)

    ForInnerExpr              go to state 130
    Expression                go to state 124
    AssignmentExpression      go to state 43
    ConditionalExpression     go to state 44
    LogicalANDExpression      go to state 45
    EqualityExpression        go to state 46
    RelationalExpression      go to state 47
    AdditiveExpression        go to state 48
    MultiplicativeExpression  go to state 49
    UnaryExpression           go to state 50
    PostfixExpression         go to state 51
    PrimaryExpression         go to state 52
    Literal                   go to state 53


state 126

   73 FunctionCall: '(' ArgumentExpressionList ')' .

    $default  reduce using rule 73 (FunctionCall)


state 127

   76 ArgumentExpressionList: ArgumentExpressionList ',' . AssignmentExpression

    INC     shift, and go to state 20
    DEC     shift, and go to state 21
    FALSE   shift, and go to state 25
    TRUE    shift, and go to state 26
    INT     shift, and go to state 27
    STRING  shift, and go to state 28
    NAME    shift, and go to state 29
    '('     shift, and go to state 31
    '!'     shift, and go to state 33

    AssignmentExpression      go to state 131
    ConditionalExpression     go to state 44
    LogicalANDExpression      go to state 45
    EqualityExpression        go to state 46
    RelationalExpression      go to state 47
    AdditiveExpression        go to state 48
    MultiplicativeExpression  go to state 49
    UnaryExpression           go to state 50
    PostfixExpression         go to state 51
    PrimaryExpression         go to state 52
    Literal                   go to state 53


state 128

   29 IfStatement: IF '(' Expression ')' Block .
   30            | IF '(' Expression ')' Block . ELSE Block

    ELSE  shift, and go to state 132

    $default  reduce using rule 29 (IfStatement)


state 129

   33 ForStatement: FOR '(' VariableDeclaration ForInnerExpr ';' . ForInnerExpr ')' Block

    INC     shift, and go to state 20
    DEC     shift, and go to state 21
    FALSE   shift, and go to state 25
    TRUE    shift, and go to state 26
    INT     shift, and go to state 27
    STRING  shift, and go to state 28
    NAME    shift, and go to state 29
    '('     shift, and go to state 31
    '!'     shift, and go to state 33

    $default  reduce using rule 36 (ForInnerExpr)

    ForInnerExpr              go to state 133
    Expression                go to state 124
    AssignmentExpression      go to state 43
    ConditionalExpression     go to state 44
    LogicalANDExpression      go to state 45
    EqualityExpression        go to state 46
    RelationalExpression      go to state 47
    AdditiveExpression        go to state 48
    MultiplicativeExpression  go to state 49
    UnaryExpression           go to state 50
    PostfixExpression         go to state 51
    PrimaryExpression         go to state 52
    Literal                   go to state 53


state 130

   34 ForStatement: FOR '(' AssignmentExpression ';' ForInnerExpr . ';' ForInnerExpr ')' Block

    ';'  shift, and go to state 134


state 131

   76 ArgumentExpressionList: ArgumentExpressionList ',' AssignmentExpression .

    $default  reduce using rule 76 (ArgumentExpressionList)


state 132

   30 IfStatement: IF '(' Expression ')' Block ELSE . Block

    '{'  shift, and go to state 14

    Block  go to state 135


state 133

   33 ForStatement: FOR '(' VariableDeclaration ForInnerExpr ';' ForInnerExpr . ')' Block

    ')'  shift, and go to state 136


state 134

   34 ForStatement: FOR '(' AssignmentExpression ';' ForInnerExpr ';' . ForInnerExpr ')' Block

    INC     shift, and go to state 20
    DEC     shift, and go to state 21
    FALSE   shift, and go to state 25
    TRUE    shift, and go to state 26
    INT     shift, and go to state 27
    STRING  shift, and go to state 28
    NAME    shift, and go to state 29
    '('     shift, and go to state 31
    '!'     shift, and go to state 33

    $default  reduce using rule 36 (ForInnerExpr)

    ForInnerExpr              go to state 137
    Expression                go to state 124
    AssignmentExpression      go to state 43
    ConditionalExpression     go to state 44
    LogicalANDExpression      go to state 45
    EqualityExpression        go to state 46
    RelationalExpression      go to state 47
    AdditiveExpression        go to state 48
    MultiplicativeExpression  go to state 49
    UnaryExpression           go to state 50
    PostfixExpression         go to state 51
    PrimaryExpression         go to state 52
    Literal                   go to state 53


state 135

   30 IfStatement: IF '(' Expression ')' Block ELSE Block .

    $default  reduce using rule 30 (IfStatement)


state 136

   33 ForStatement: FOR '(' VariableDeclaration ForInnerExpr ';' ForInnerExpr ')' . Block

    '{'  shift, and go to state 14

    Block  go to state 138


state 137

   34 ForStatement: FOR '(' AssignmentExpression ';' ForInnerExpr ';' ForInnerExpr . ')' Block

    ')'  shift, and go to state 139


state 138

   33 ForStatement: FOR '(' VariableDeclaration ForInnerExpr ';' ForInnerExpr ')' Block .

    $default  reduce using rule 33 (ForStatement)


state 139

   34 ForStatement: FOR '(' AssignmentExpression ';' ForInnerExpr ';' ForInnerExpr ')' . Block

    '{'  shift, and go to state 14

    Block  go to state 140


state 140

   34 ForStatement: FOR '(' AssignmentExpression ';' ForInnerExpr ';' ForInnerExpr ')' Block .

    $default  reduce using rule 34 (ForStatement)
