module cello;


public generic File = L ImportDeclaration* TopLevel+ L EOT;



//literal
 generic  ImportDeclaration =
      "import" Identifier  (void:"." Identifier)* void:";"
              ;
 generic Declaration =
        MethodDeclaration
        /VariableDeclaration
        /Dummy1
        /Dummy2
        ;
 generic MethodDeclaration =
        Type L Identifier L "(" MethodParamList ")" (L Block/ L ";")
        ;

 generic MethodParamList =
         MethodParams? (void:';' void:"...")?
         ;

 generic MethodParams =
          MethodParam (void:',' MethodParam)*
          ;

 generic MethodParam =
         Type L Identifier? L
         ;
 generic VariableDeclaration =
         Type L VariableList ";"
         ;
 generic VariableList =
        InitDecl (void:"," InitDecl)*
        ;
 generic InitDecl =
        Identifier (void:"=" Initializer)? L
        ;
 generic Initializer =
       AssignmentExpression
       ;
 generic Dummy1 =
       "dummy1" VariableList ";"
       ;
 generic Dummy2 =
       "dummy2" VariableList ";"
       ;

 generic Type =
        PrimitiveType
       / ReferenceType
       ;

       inline generic PrimitiveType =
        "int"
       / "boolean"
       / "long"
       / "string"
       ;
       inline generic ReferenceType =
       Identifier
       ;
 generic Block =
     "{" (Statement / Declaration )* "}"
     ;


 generic Statement =
           Block
          / "if" L "(" Expression ")" Block Else?
          / "if1" L "(" Expression ")" Block Else?
          / "if2" L "(" Expression ")" Block Else?
          / "if3" L "(" Expression ")" Block Else?
          / "if4" L "(" Expression ")" Block Else?
          / "if5" L "(" Expression ")" Block Else?
          / "if6" L "(" Expression ")" Block Else?
          / "if7" L "(" Expression ")" Block Else?
          / "if8" L "(" Expression ")" Block Else?
          / "if9" L "(" Expression ")" Block Else?
          / "ifA" L "(" Expression ")" Block Else?
          / "ifB" L "(" Expression ")" Block Else?
          / "return" L Expression? ";"
          / Expression ";"
          / ";"
          ;
 generic Else =
       "else" L Block;

 generic Expression=
  AssignmentExpression (void:"," AssignmentExpression )*
  ;

variant generic AssignmentExpression =
    UnaryExpression AssignmentOperator AssignmentExpression
  / ConditionalExpression
  ;

   String AssignmentOperator =
    "="
    / "*="
    / "/="
    / "%="
    / "+="
    / "-="
    / "<<="
    / ">>="
    / ">>>="
    / "&="
    / "^="
    / "|="

  ;

  generic ConditionalExpression =
    LogicalOrExpression ExpressionRepeat*
   ;
  generic ExpressionRepeat =
    void:"?" Expression void:":" LogicalOrExpression
    ;
 generic LogicalOrExpression =
    LogicalAndExpression (void:"||" LogicalAndExpression)*
    ;

 generic LogicalAndExpression =
   EqualityExpression (void:"&&" EqualityExpression)*
   ;

 generic EqualityExpression =
    RelationalExpression ((void:"=="/void:"!=") RelationalExpression)*
    ;


 generic RelationalExpression =
      UnaryExpression ("<" / "<=" / ">" / ">=" )(UnaryExpression)*
      ;

 generic UnaryExpression =
       PostfixExpression
      / "!" UnaryExpression
     ;

 generic PostfixExpression =
     PrimaryExpression (FunctionCall)*
     ;

 generic FunctionCall =
    "(" ArgumentExpressionList? ")"
    ;

 generic ArgumentExpressionList =
   AssignmentExpression (void:"," AssignmentExpression)*
   ;

 generic PrimaryExpression =
  Constant
  /"(" Expression ")"
  /Identifier
  /FunctionExpression
  ;

 generic FunctionExpression =
   Type L Identifier? "(" MethodParamList ")" Block
   ;

 generic Constant =
    IntegerLiteral
    / BooleanLiteral
    / StringLiteral
    / NullLiteral
    ;


  generic IntegerLiteral            =  Decimal L
  ;
  generic Decimal                   = [1-9] DIGIT* / '0'
  ;

  generic BooleanLiteral            =
              "true"  L
            / "false" L
            ;

  generic StringLiteral             =
            "  StringContent*  " L
           ;
  String StringContent            = ![\"\n\\] ;
  generic NullLiteral               = "null" L ;


  generic L                         = ( S / BlockComment / LineComment )* ;
  generic S                         = [ \n\r\t\u000B\u000C] ;
  generic BlockComment              = "/*" ( !"*/" _ )* "*/" ;
  generic LineComment               = "//" ( !"\n" _ )* ;
  generic EOT                       = ! L ;
  generic Identifier                = NAME L;
  generic NAME                      = !DIGIT !( KEYWORD W ) W+ ;
  generic DIGIT                     = [0-9] ;
  generic W                         = [a-zA-Z0-9_] ;
  generic TopLevel                 = Declaration/";";
  generic KEYWORD                   = "else"
                                    / "if"
                                    / "int"
                                    / "return"
                                    ;
